<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>vim的使用</title>
    <link href="/2023/11/07/vim%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/11/07/vim%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><p>基本上 vi&#x2F;vim 共分为三种模式，<strong>命令模式（Command Mode）</strong>、<strong>输入模式（Insert Mode）</strong>和<strong>命令行模式（Command-Line Mode）</strong>。</p><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p><strong>用户刚刚启动 vi&#x2F;vim，便进入了命令模式。</strong></p><p>此状态下敲击键盘动作会被 Vim 识别为命令，而非输入字符，比如我们此时按下 i，并不会输入一个字符，i 被当作了一个命令。</p><p>以下是普通模式常用的几个命令：</p><ul><li><strong>i</strong> – 切换到输入模式，在光标当前位置开始输入文本。</li><li><strong>x</strong> – 删除当前光标所在处的字符。</li><li><strong>:</strong> – 切换到底线命令模式，以在最底一行输入命令。</li><li><strong>a</strong> – 进入插入模式，在光标下一个位置开始输入文本。</li><li><strong>o</strong> – 在当前行的下方插入一个新行，并进入插入模式。</li><li><strong>O</strong> – 在当前行的上方插入一个新行，并进入插入模式。</li><li><strong>dd</strong> – 删除当前行。</li><li><strong>yy</strong> – 复制当前行。</li><li><strong>p</strong>（小写） – 粘贴剪贴板内容到光标下方。</li><li><strong>P</strong>（大写）– 粘贴剪贴板内容到光标上方。</li><li><strong>u</strong> – 撤销上一次操作。</li><li><strong>Ctrl + r</strong> – 重做上一次撤销的操作。</li><li><strong>:w</strong> – 保存文件。</li><li><strong>:q</strong> – 退出 Vim 编辑器。</li><li><strong>:q!</strong> – 强制退出 Vim 编辑器，不保存修改。<br>若想要编辑文本，只需要启动 Vim，进入了命令模式，按下 i 切换到输入模式即可。</li></ul><p>命令模式只有一些最基本的命令，因此仍要依靠<strong>底线命令行模式</strong>输入更多命令。</p><h3 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h3><p>在命令模式下按下 <code>i</code> 就进入了输入模式，使用 <code>Esc</code> 键可以返回到普通模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li><strong>字符按键以及 Shift 组合</strong> – 输入字符</li><li><strong>ENTER</strong> – 回车键，换行</li><li><strong>BACK SPACE</strong> – 退格键，删除光标前一个字符</li><li><strong>DEL</strong> – 删除键，删除光标后一个字符</li><li><strong>方向键</strong> – 在文本中移动光标</li><li><strong>HOME&#x2F;END</strong> – 移动光标到行首&#x2F;行尾</li><li><strong>Page Up&#x2F;Page Down</strong> – 上&#x2F;下翻页</li><li><strong>Insert</strong> – 切换光标为输入&#x2F;替换模式，光标将变成竖线&#x2F;下划线</li><li><strong>ESC</strong> – 退出输入模式，切换到命令模式</li></ul><h3 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h3><p>在命令模式下按下 **<code>:</code>**（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li><code>:w</code> – 保存文件。</li><li><code>:q</code> – 退出 Vim 编辑器。</li><li><code>:wq</code> – 保存文件并退出 Vim 编辑器。</li><li><code>:q!</code> – 强制退出 Vim 编辑器，不保存修改。<br>按 <code>ESC</code> 键可随时退出底线命令模式。</li></ul><h3 id="vi-x2F-vim-按键说明"><a href="#vi-x2F-vim-按键说明" class="headerlink" title="vi&#x2F;vim 按键说明"></a>vi&#x2F;vim 按键说明</h3><p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p><h4 id="第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等"><a href="#第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等" class="headerlink" title="第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等"></a>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</h4><table><thead><tr><th align="left">移动光标的方法</th><th align="left"></th></tr></thead><tbody><tr><td align="left">h 或 向左箭头键(←)</td><td align="left">光标向左移动一个字符</td></tr><tr><td align="left">j 或 向下箭头键(↓)</td><td align="left">光标向下移动一个字符</td></tr><tr><td align="left">k 或 向上箭头键(↑)</td><td align="left">光标向上移动一个字符</td></tr><tr><td align="left">l 或 向右箭头键(→)</td><td align="left">光标向右移动一个字符</td></tr><tr><td align="left"><strong>如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</strong></td><td align="left"></td></tr><tr><td align="left">[Ctrl] + [f]</td><td align="left">屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [b]</td><td align="left">屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [d]</td><td align="left">屏幕『向下』移动半页</td></tr><tr><td align="left">[Ctrl] + [u]</td><td align="left">屏幕『向上』移动半页</td></tr><tr><td align="left">+</td><td align="left">光标移动到非空格符的下一行</td></tr><tr><td align="left">-</td><td align="left">光标移动到非空格符的上一行</td></tr><tr><td align="left">n<space></td><td align="left">那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。</td></tr><tr><td align="left">0 或功能键[Home]</td><td align="left">这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td></tr><tr><td align="left">$ 或功能键[End]</td><td align="left">移动到这一行的最后面字符处(常用)</td></tr><tr><td align="left">H</td><td align="left">光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td align="left">M</td><td align="left">光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td align="left">L</td><td align="left">光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td align="left">G</td><td align="left">移动到这个档案的最后一行(常用)</td></tr><tr><td align="left">nG</td><td align="left">n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td></tr><tr><td align="left">gg</td><td align="left">移动到这个档案的第一行，相当于 1G 啊！ (常用)</td></tr><tr><td align="left">n<Enter></td><td align="left">n 为数字。光标向下移动 n 行(常用)</td></tr><tr><td align="left"><strong>搜索替换</strong></td><td align="left"></td></tr><tr><td align="left">&#x2F;word</td><td align="left">向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 &#x2F;vbird 即可！ (常用)</td></tr><tr><td align="left">?word</td><td align="left">向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td align="left">n</td><td align="left">这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 &#x2F;vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td></tr><tr><td align="left">N</td><td align="left">这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 &#x2F;vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td></tr><tr><td align="left"><strong>使用 &#x2F;word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！</strong></td><td align="left"></td></tr><tr><td align="left">:n1,n2s&#x2F;word1&#x2F;word2&#x2F;g</td><td align="left">n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间 搜寻 vbird 并取代为 VBIRD 则： 『:100,200s&#x2F;vbird&#x2F;VBIRD&#x2F;g』。(常用)</td></tr><tr><td align="left">:1,$s&#x2F;word1&#x2F;word2&#x2F;g 或 :%s&#x2F;word1&#x2F;word2&#x2F;g</td><td align="left">从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td></tr><tr><td align="left">:1,$s&#x2F;word1&#x2F;word2&#x2F;gc 或 :%s&#x2F;word1&#x2F;word2&#x2F;gc</td><td align="left">从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td></tr><tr><td align="left"><strong>删除、复制与贴上</strong></td><td align="left"></td></tr><tr><td align="left">x, X</td><td align="left">在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td align="left">nx n</td><td align="left">为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td></tr><tr><td align="left">dd</td><td align="left">剪切游标所在的那一整行(常用)，用 p&#x2F;P 可以粘贴。</td></tr><tr><td align="left">ndd</td><td align="left">n 为数字。剪切光标所在的向下 n 行，例如 20dd 则是剪切 20 行(常用)，用 p&#x2F;P 可以粘贴。</td></tr><tr><td align="left">d1G</td><td align="left">删除光标所在到第一行的所有数据</td></tr><tr><td align="left">dG</td><td align="left">删除光标所在到最后一行的所有数据</td></tr><tr><td align="left">d$</td><td align="left">删除游标所在处，到该行的最后一个字符</td></tr><tr><td align="left">d0</td><td align="left">那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td align="left">yy</td><td align="left">复制游标所在的那一行(常用)</td></tr><tr><td align="left">nyy</td><td align="left">n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td align="left">y1G</td><td align="left">复制游标所在行到第一行的所有数据</td></tr><tr><td align="left">yG</td><td align="left">复制游标所在行到最后一行的所有数据</td></tr><tr><td align="left">y0</td><td align="left">复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td align="left">y$</td><td align="left">复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td align="left">p, P</td><td align="left">p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数 据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)</td></tr><tr><td align="left">J</td><td align="left">将光标所在行与下一行的数据结合成同一行</td></tr><tr><td align="left">c</td><td align="left">重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td align="left">u</td><td align="left">复原前一个动作。(常用)</td></tr><tr><td align="left">[Ctrl]+r</td><td align="left">重做上一个动作。(常用)</td></tr><tr><td align="left"><strong>这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！</strong></td><td align="left"></td></tr><tr><td align="left">.</td><td align="left">不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)</td></tr></tbody></table><h4 id="第二部分：一般模式切换到编辑模式的可用的按钮说明"><a href="#第二部分：一般模式切换到编辑模式的可用的按钮说明" class="headerlink" title="第二部分：一般模式切换到编辑模式的可用的按钮说明"></a>第二部分：一般模式切换到编辑模式的可用的按钮说明</h4><table><thead><tr><th align="left">进入输入或取代的编辑模式</th><th align="left"></th></tr></thead><tbody><tr><td align="left">i, I</td><td align="left">进入输入模式(Insert mode)：i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td></tr><tr><td align="left">a, A</td><td align="left">进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td align="left">o, O</td><td align="left">进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为在目前光标所在的下一行处输入新的一行； O 为在目前光标所在的上一行处输入新的一行！(常用)</td></tr><tr><td align="left">r, R</td><td align="left">进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R 会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td align="left"><strong>上面这些按键中，在 vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</strong></td><td align="left"></td></tr><tr><td align="left">[Esc]</td><td align="left">退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><h4 id="第三部分：一般模式切换到指令行模式的可用的按钮说明"><a href="#第三部分：一般模式切换到指令行模式的可用的按钮说明" class="headerlink" title="第三部分：一般模式切换到指令行模式的可用的按钮说明"></a>第三部分：一般模式切换到指令行模式的可用的按钮说明</h4><table><thead><tr><th align="left">指令行的储存、离开等指令</th><th align="left"></th></tr></thead><tbody><tr><td align="left">:w</td><td align="left">将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td align="left">:w!</td><td align="left">若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td align="left">:q</td><td align="left">离开 vi (常用)</td></tr><tr><td align="left">:q!</td><td align="left">若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td align="left"><strong>注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</strong></td><td align="left"></td></tr><tr><td align="left">:wq</td><td align="left">储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td align="left">ZZ</td><td align="left">这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)</td></tr><tr><td align="left">ZQ</td><td align="left">不保存，强制退出。效果等同于 :q!。</td></tr><tr><td align="left">:w [filename]</td><td align="left">将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td align="left">:r [filename]</td><td align="left">在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td align="left">:n1,n2 w [filename]</td><td align="left">将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td align="left">:! command</td><td align="left">暂时离开 vi 到指令行模式下执行 command 的显示结果！例如『:! ls &#x2F;home』即可在 vi 当中察看 &#x2F;home 底下以 ls 输出的档案信息！</td></tr><tr><td align="left"><strong>vim 环境的变更</strong></td><td align="left"></td></tr><tr><td align="left">:set nu</td><td align="left">显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td align="left">:set nonu</td><td align="left">与 set nu 相反，为取消行号！</td></tr><tr><td align="left">syntax on</td><td align="left">显示高亮</td></tr></tbody></table><style>    table{        width: 100%;        border-collapse:collapse;         empty-cells:show;    }    table th,td{        height:35px;    }    table th{        font-weight:bold;        /* text-align:center !important; */        background:#CCCCCC;        white-space:nowrap;    }    /* table tbody tr:nth-child(2n){        background:#ECF2F9;    } */    tr:nth-child(2n) {        background-color: #f2f2f2;    }    table tr:hover{        background:#B2B2B2;    }    /* table td:nth-child(1){        white-space:nowrap;    } */    table th:nth-of-type(1){        width:200px;        white-space:nowrap;    }</style>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go中的循环迭代变量</title>
    <link href="/2023/10/27/go%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E8%BF%AD%E4%BB%A3%E5%8F%98%E9%87%8F/"/>
    <url>/2023/10/27/go%E4%B8%AD%E7%9A%84%E5%BE%AA%E7%8E%AF%E8%BF%AD%E4%BB%A3%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2023/09/18/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2023/09/18/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a><a href="https://cloud.tencent.com/developer/article/1435804">正则表达式</a></h3><h3 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h3><p>匹配中文字符的正则表达式： <code>[\u4e00-\u9fa5]</code><br>英文字母:<code>[a-zA-Z]</code><br>数字:<code>[0-9]</code><br>匹配中文，英文字母和数字及下划线：<code>^[\u4e00-\u9fa5_a-zA-Z0-9]+$</code> 同时判断输入长度：<code>[\u4e00-\u9fa5_a-zA-Z0-9*]&#123;4,10&#125;</code><br>不能以*开头：<code>(?!*)</code><br>不能以_结尾：<code>(?!.\_?\*$)</code><br>匹配双字节字符(包括汉字在内)：<code>[^\x00-\xff]</code><br>匹配空行的正则表达式：<code>\n[\s| ]_\r</code><br>匹配 HTML 标记的正则表达式：<code>/&lt;(._)&gt;._&lt;\/\1&gt;|&lt;(._) \/&gt;/</code><br>匹配首尾空格的正则表达式：<code>(^\s\_)|(\s_$)</code><br>匹配 Email 地址的正则表达式：<code>\w+([-+.]\w+)\*@\w+([-.]\w+)_\.\w+([-.]\w+)_</code><br>匹配网址 URL 的正则表达式：<code>http://([\w-]+\.)+[\w-]+(/[\w- ./?%&amp;=]\*)?</code><br>至少一个汉字、数字、字母、下划线：<code>[a-zA-Z0-9_\u4e00-\u9fa5]+</code><br>与字符串结束的地方匹配：<code>$</code><br>只含有汉字、数字、字母、下划线，下划线位置不限：<code>^[a-zA-Z0-9_\u4e00-\u9fa5]+$</code></p>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac下生成SSH Key</title>
    <link href="/2023/09/15/mac%E4%B8%8B%E7%94%9F%E6%88%90SSH-Key/"/>
    <url>/2023/09/15/mac%E4%B8%8B%E7%94%9F%E6%88%90SSH-Key/</url>
    
    <content type="html"><![CDATA[<h2 id="Mac-下生成-SSH-key"><a href="#Mac-下生成-SSH-key" class="headerlink" title="Mac 下生成 SSH key"></a><a href="https://juejin.cn/post/7153654591911886856">Mac 下生成 SSH key</a></h2>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MacOS</tag>
      
      <tag>开发工具</tag>
      
      <tag>SSH Key</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github搜索技巧</title>
    <link href="/2023/09/14/Github%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/"/>
    <url>/2023/09/14/Github%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h3 id="GitHub-代码搜索语法"><a href="#GitHub-代码搜索语法" class="headerlink" title="GitHub 代码搜索语法"></a><a href="https://docs.github.com/en/search-github/github-code-search/understanding-github-code-search-syntax#symbol-qualifier">GitHub 代码搜索语法</a></h3>]]></content>
    
    
    <categories>
      
      <category>Github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web3资料</title>
    <link href="/2023/09/12/Web3%E8%B5%84%E6%96%99/"/>
    <url>/2023/09/12/Web3%E8%B5%84%E6%96%99/</url>
    
    <content type="html"><![CDATA[<h3 id="openzeppelin-文档"><a href="#openzeppelin-文档" class="headerlink" title="openzeppelin 文档"></a><a href="https://docs.openzeppelin.com/contracts/">openzeppelin 文档</a></h3><h3 id="subgraph-开发文档"><a href="#subgraph-开发文档" class="headerlink" title="subgraph 开发文档"></a><a href="https://thegraph.com/docs/en/">subgraph 开发文档</a></h3><h3 id="Hardhat"><a href="#Hardhat" class="headerlink" title="Hardhat"></a><a href="https://hardhat.org/hardhat-runner/docs/getting-started#overview">Hardhat</a></h3><h3 id="foundry"><a href="#foundry" class="headerlink" title="foundry"></a><a href="https://book.getfoundry.sh/">foundry</a></h3><h3 id="WTF-Academy-开发者的-Web3-开源大学"><a href="#WTF-Academy-开发者的-Web3-开源大学" class="headerlink" title="WTF Academy(开发者的 Web3 开源大学)"></a><a href="https://www.wtf.academy/">WTF Academy</a>(开发者的 Web3 开源大学)</h3><h3 id="alchemy"><a href="#alchemy" class="headerlink" title="alchemy"></a><a href="https://www.alchemy.com/">alchemy</a></h3><h3 id="infura"><a href="#infura" class="headerlink" title="infura"></a><a href="https://infura.io/">infura</a></h3><h3 id="ethereum-开发文档"><a href="#ethereum-开发文档" class="headerlink" title="ethereum 开发文档"></a><a href="https://ethereum.org/en/developers/docs/apis/json-rpc/">ethereum 开发文档</a></h3>]]></content>
    
    
    <categories>
      
      <category>Web3</category>
      
    </categories>
    
    
    <tags>
      
      <tag>区块链</tag>
      
      <tag>solidity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编程基础</title>
    <link href="/2023/09/07/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/09/07/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><ul><li>按位或 |： 两个二进制数，两个对应位的值至少有一个为 1，则结果为 1，否则为 0。</li><li>按位异或 ^：两个二进制数，两个对应位的值不同，则结果为 1，否则为 0。</li><li>按位取反 ~：对二进制数的每个位上的值取反。</li><li>按位与 &amp;：两个二进制数，两个对应位的值都为 1，则结果为 1，否则为 0。</li><li>左移位 &lt;&lt;：将一个数 n 向左移动 m 位，新的位置由 0 填充，向左移动一个位置，相当于 <code>n * (2 ** 1)</code>，向左移动两个位置，相当于 <code>n * (2 ** 2)</code>。</li><li>右移位 &gt;&gt;：将一个数 n 向右移动 m 位，新的位置由 0 填充，向右移动一个位置，相当于 <code>n / (2 ** 1)</code>，向右移动两个位置，相当于 <code>n / (2 ** 2)</code>。</li></ul><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><ul><li>加法: <code>x + y</code></li><li>减法: <code>x - y</code></li><li>乘法: <code>x * y</code></li><li>除法: <code>x / y</code></li><li>取模: <code>x % y</code> 两个数相除后的余数，(例如, <code>13 % 5</code> 余 <code>3</code>, 因为 13 除以 5，余 3)</li></ul><div class="note note-warning">            <p>取模运算的结果的符号与被除数的符号相同。</p>          </div>]]></content>
    
    
    <categories>
      
      <category>编程基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>solidity语言入门</title>
    <link href="/2023/09/06/solidity%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/"/>
    <url>/2023/09/06/solidity%E8%AF%AD%E8%A8%80%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="声明顺序"><a href="#声明顺序" class="headerlink" title="声明顺序"></a>声明顺序</h4><p>1、using SafeCast<br>2、结构体声明<br>3、其他合约使用声明 <code>IERC20 public immutable XX;</code><br>4、变量声明<br>5、常量声明<br>6、mapping 声明<br>7、modifier 声明（函数修饰符）<br>8、constructor</p><h4 id="函数修饰符"><a href="#函数修饰符" class="headerlink" title="函数修饰符"></a>函数修饰符</h4><p>使用 modifier 来声明函数修饰符更友好</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs solidity">modifier onlyOwner() &#123;<br>    if (msg.sender != address(OWNER)) revert InvalidCaller(msg.sender);<br>    _;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="int-类型取值范围"><a href="#int-类型取值范围" class="headerlink" title="int 类型取值范围"></a>int 类型取值范围</h4><p>int256 与 uint256</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs solidity">int256: -2**255 ~ 2**255-1<br>uint256: 2**256<br></code></pre></td></tr></table></figure><h3 id="自增运算符"><a href="#自增运算符" class="headerlink" title="自增运算符"></a>自增运算符</h3><p><strong>i++</strong>: 前置自增运算符。它先将变量的值加 1，然后返回增加后的值。也可以说是先进行加法操作，再返回结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs solidity">uint256 i = 5;<br>uint256 result = ++i;  // result = 6, i = 6<br></code></pre></td></tr></table></figure><p>在上述示例中，<code>++i</code> 先将 <code>i</code> 的值加 1，然后将增加后的值 6 赋给 <code>result</code>。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-strong">**++i**</span>: 后置自增运算符。它先返回变量的当前值，然后再将变量的值加 1。也可以说是先返回结果，再进行加法操作。<br></code></pre></td></tr></table></figure><p>uint256 i &#x3D; 5;<br>uint256 result &#x3D; i++; &#x2F;&#x2F; result &#x3D; 5, i &#x3D; 6</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>在上述示例中，`i++` 先将 `i` 的当前值<span class="hljs-number">5</span>赋给 `result`，然后再将 `i` 的值加<span class="hljs-number">1</span>，变为<span class="hljs-number">6</span>。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solidity语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>区块链</tag>
      
      <tag>solidity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac环境下设置命令行打开编辑器</title>
    <link href="/2023/09/05/%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%93%E5%BC%80%E5%90%84%E7%A7%8D%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <url>/2023/09/05/%E5%A6%82%E4%BD%95%E8%AE%BE%E7%BD%AE%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%89%93%E5%BC%80%E5%90%84%E7%A7%8D%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="Goland"><a href="#Goland" class="headerlink" title="Goland"></a>Goland</h3><p>1、终端打开 <code>~/.zshrc</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim ~/.zshrc<br></code></pre></td></tr></table></figure><p>2、将 Goland 的安装路径添加到 PATH</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/Applications/GoLand.app/Contents/MacOS<br></code></pre></td></tr></table></figure><h3 id="Pycharm"><a href="#Pycharm" class="headerlink" title="Pycharm"></a>Pycharm</h3><p>1、终端打开 <code>~/.zshrc</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim ~/.zshrc<br></code></pre></td></tr></table></figure><p>2、将 Pycharm 的安装路径添加到 PATH</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:/Applications/Pycharm.app/Contents/MacOS<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VsCode</tag>
      
      <tag>Goland</tag>
      
      <tag>Pycharm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>solc以及solc-select的安装与使用</title>
    <link href="/2023/09/05/solc%E4%BB%A5%E5%8F%8Asolc-select%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/09/05/solc%E4%BB%A5%E5%8F%8Asolc-select%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="solc-select-命令"><a href="#solc-select-命令" class="headerlink" title="solc-select 命令"></a>solc-select 命令</h3><p>列出所有可用版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">solc-select install<br></code></pre></td></tr></table></figure><p>安装指定版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">solc-select install &lt;version&gt;<br><br>solc-select install latest <span class="hljs-comment"># 安装最新版本</span><br></code></pre></td></tr></table></figure><p>切换指定版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">solc use &lt;version&gt;<br></code></pre></td></tr></table></figure><p>显示当前安装的版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">solc-select versions<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Solidity语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>区块链</tag>
      
      <tag>solidity</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python学习笔记</title>
    <link href="/2023/09/05/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/09/05/python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><h4 id="直接使用-mac-环境下自带的-python3"><a href="#直接使用-mac-环境下自带的-python3" class="headerlink" title="直接使用 mac 环境下自带的 python3"></a>直接使用 mac 环境下自带的 python3</h4><h3 id="python-常用命令"><a href="#python-常用命令" class="headerlink" title="python 常用命令"></a>python 常用命令</h3><p>查看 python3 版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python3 --version<br></code></pre></td></tr></table></figure><p>查看 pip3 版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip3 --version<br><br><span class="hljs-comment"># 同时可以显示 python 的版本和 pip3 的版本</span><br></code></pre></td></tr></table></figure><p>进入 python 终端</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python3<br></code></pre></td></tr></table></figure><p>退出 python 终端</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">exit</span>() 或 Ctrl + D 快捷键<br></code></pre></td></tr></table></figure><p>查看 python 安装位置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">where</span> python3<br></code></pre></td></tr></table></figure><p>查看 pip3 所有可安装的包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip3 list<br><br>pip3 freeze  <span class="hljs-comment"># 可以导出文件</span><br></code></pre></td></tr></table></figure><p>查看可更新的库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip3 list --outdated<br><br>pip3 list -o <span class="hljs-comment"># 另一种形式</span><br></code></pre></td></tr></table></figure><p>升级某个库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip3 install --upgrade pkg_name<br><br>pip3 install -U pkg_name <span class="hljs-comment"># 另一种形式</span><br><br><span class="hljs-comment"># 升级某个库，也可以指定想要的版本号</span><br></code></pre></td></tr></table></figure><p>查看 pip3 已安装的包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip3 show pkg_name<br>pip3 show -f pkg_name <span class="hljs-comment"># 展示更具体的详细信息</span><br></code></pre></td></tr></table></figure><p>更新 pip3 版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip3 install --upgrade pip<br></code></pre></td></tr></table></figure><p>pip3 安装包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 默认安装最新版本</span><br>pip3 install pkg_name<br><br><span class="hljs-comment"># 安装指定版本</span><br>pip3 install pkg_name==版本号<br></code></pre></td></tr></table></figure><p>增加安装包的等待时间，解决 timeout 问题</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip3 install pkg_name --<span class="hljs-built_in">timeout</span> 6000<br></code></pre></td></tr></table></figure><p>卸载包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip3 uninstall pkg_name<br></code></pre></td></tr></table></figure><p>卸载 pip 本身</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python -m pip3 uninstall pip<br></code></pre></td></tr></table></figure><p>更换国内镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">pip3 install pkg_name -i 镜像源<br><br><span class="hljs-comment"># 清华：https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="hljs-comment"># 阿里云：http://mirrors.aliyun.com/pypi/simple/</span><br><span class="hljs-comment"># 中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="hljs-comment"># 华中理工大学：http://pypi.hustunique.com/</span><br><span class="hljs-comment"># 山东理工大学：http://pypi.sdutlinux.org/</span><br><span class="hljs-comment"># 豆瓣：http://pypi.douban.com/simple/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>npm使用</title>
    <link href="/2023/09/04/npm%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/09/04/npm%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="npm-使用笔记"><a href="#npm-使用笔记" class="headerlink" title="npm 使用笔记"></a>npm 使用笔记</h2><h3 id="查看-npm-信息"><a href="#查看-npm-信息" class="headerlink" title="查看 npm 信息"></a>查看 npm 信息</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 查看 npm 的版本</span><br>npm -v  //6.4.0 &lt;&lt; 安装成功会返回版本号<br><br><span class="hljs-comment"># 查看各个命令的简单用法</span><br>npm -l<br><br><span class="hljs-comment"># 查看 npm 命令列表</span><br>npm <span class="hljs-built_in">help</span><br><br><span class="hljs-comment"># 查看 npm 的配置</span><br>npm config list -l<br></code></pre></td></tr></table></figure><h3 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm init<br></code></pre></td></tr></table></figure><h3 id="修改-npm-镜像"><a href="#修改-npm-镜像" class="headerlink" title="修改 npm 镜像"></a>修改 npm 镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 修改成华为云镜像源</span><br>npm config <span class="hljs-built_in">set</span> registry https://mirrors.huaweicloud.com/repository/npm/<br><br><span class="hljs-comment"># 验证命令</span><br>npm config get registry<br><br><span class="hljs-comment"># 如果返回https://mirrors.huaweicloud.com/repository/npm/，说明镜像配置成功。</span><br></code></pre></td></tr></table></figure><p>其他镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 腾讯镜像</span><br>npm config <span class="hljs-built_in">set</span> registry http://mirrors.cloud.tencent.com/npm/<br><br><span class="hljs-comment"># 淘宝镜像</span><br>npm config <span class="hljs-built_in">set</span> registry https://registry.npmmirror.com<br></code></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 读取package.json里面的配置单安装</span><br>npm install<br><span class="hljs-comment"># 可简写成 npm i</span><br><br><span class="hljs-comment"># 默认安装指定模块的最新(@latest)版本</span><br>npm install &lt;name&gt;<br><span class="hljs-comment"># eg:npm install gulp</span><br><br><span class="hljs-comment"># 安装指定模块的指定版本</span><br>npm install &lt;name&gt;@&lt;version&gt;<br><span class="hljs-comment"># eg: npm install gulp@3.9.1</span><br><br><span class="hljs-comment"># 安装指定指定版本范围内的模块</span><br>npm install &lt;name&gt;@&lt;version range&gt;<br><span class="hljs-comment"># eg: npm install vue@&quot;&gt;=1.0.28 &lt; 2.0.0&quot;</span><br><br><span class="hljs-comment"># 安装指定模块的指定标签 默认值为(@latest)</span><br>npm install &lt;name&gt;@&lt;tag&gt;<br><span class="hljs-comment">#eg:npm install sax@0.1.1</span><br><br><span class="hljs-comment"># 通过Github代码库地址安装</span><br>npm install &lt;tarball url&gt;<br><span class="hljs-comment"># eg:npm install git://github.com/package/path.git</span><br></code></pre></td></tr></table></figure><p><strong>配置选项说明</strong></p><blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 全局安装</span><br>-g | -global<br>//eg: npm i -g gulp 或者 npm i gulp -g<br><br><span class="hljs-comment"># （生产阶段的依赖） # 安装并将被添加到 package.json 的 dependencies 区</span><br>-S | --save<br>//eg: npm i gulp --save 或 npm i gulp -S<br><br><span class="hljs-comment"># （开发阶段的依赖） # 安装并将被添加到 package.json 的 devDependencies 区。</span><br>-D | --save-dev<br>//npm i gulp --save-dev 或 npm i gulp -D<br><br><span class="hljs-comment"># 这是默认设置，除非-D 或-O 存在 # 安装并将被添加到 package.json 的 dependencies 区。</span><br>-P | --save-prod<br><br><span class="hljs-comment"># （可选阶段的依赖） # 安装并将被添加到 package.json 的 optionalDependencies 区</span><br>-O | --save-optional<br><br><span class="hljs-comment"># 安装模块的确切版，而不是使用 npm 的默认 semver range 运算符</span><br>-E | --save-exact<br><span class="hljs-comment"># npm i gulp --save-exact 或 npm i gulp -E</span><br><br><span class="hljs-comment"># 安装并将被添加到`bundleDependencies`列表中</span><br>-B | --save-bundle<br><br><span class="hljs-comment"># 模块不管是否安装过，npm 都要强制重新安装</span><br>-f|--force<br><span class="hljs-comment"># eg:npm install sax --force</span><br><span class="hljs-comment"># 补充：所有模块都要强制重新安装，那就删除`node_modules`，重新执行`npm install`</span><br><span class="hljs-built_in">rm</span> -rf node_modules //或者手动去删除 node_modules 目录<br>npm install<br><br><span class="hljs-comment"># 防止保存到`dependencies`</span><br>--no-save<br><br><span class="hljs-comment"># 报告安装状况而不是真的安装</span><br>--dry-run<br></code></pre></td></tr></table></figure></blockquote><h3 id="查看已安装依赖"><a href="#查看已安装依赖" class="headerlink" title="查看已安装依赖"></a>查看已安装依赖</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 当前项目安装的所有模块</span><br>npm list<br><br><span class="hljs-comment"># 全局依赖</span><br>npm list -g --depth 0<br></code></pre></td></tr></table></figure><h3 id="卸载依赖"><a href="#卸载依赖" class="headerlink" title="卸载依赖"></a>卸载依赖</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 卸载当前项目或全局模块</span><br>npm uninstall &lt;name&gt; [-g]<br><br>eg: npm uninstall gulp --save-dev<br>    npm i gulp -g<br><br>卸载后，你可以到 /node\_modules/ 目录下查看包是否还存在，或者使用以下命令查看：<br>npm <span class="hljs-built_in">ls</span> 查看安装的模块```<br></code></pre></td></tr></table></figure><h3 id="更新依赖"><a href="#更新依赖" class="headerlink" title="更新依赖"></a>更新依赖</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 升级当前项目或全局的指定模块</span><br>npm update &lt;name&gt; [-g]<br>//eg: npm update express<br>      npm update express -g<br></code></pre></td></tr></table></figure><h3 id="搜索模块"><a href="#搜索模块" class="headerlink" title="搜索模块"></a>搜索模块</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm search &lt;搜索词&gt; [-g]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>npm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VsCode常用快捷键</title>
    <link href="/2023/09/04/VsCode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2023/09/04/VsCode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="VSCode-快捷键（MAC-版本）"><a href="#VSCode-快捷键（MAC-版本）" class="headerlink" title="VSCode 快捷键（MAC 版本）"></a>VSCode 快捷键（MAC 版本）</h3><h4 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h4><ul><li>移动到单词的最前面：<code>option + ←</code></li><li>移动到单词最末尾：<code>option + →</code></li><li>将当前行代码移动到上一行：<code>option + ↑</code></li><li>将当前行代码移动到下一行：<code>option + ↓</code></li><li>移动到当前行最前面：<code>cmd + ←</code></li><li>移动到当前行最末尾：<code>cmd + →</code></li><li>花括号之间跳转：<code>cmd + shift +</code></li><li>移动到文档第一行或最后一行：<code>cmd + ↑ / cmd + ↓</code></li></ul><h4 id="文本选择"><a href="#文本选择" class="headerlink" title="文本选择"></a>文本选择</h4><p>基于单词，行，文档的光标操作加上个 <code>shift</code> 键，就可以移动光标的同时选择文本；例如，选择当前光标所在位置到当前行最前面的代码：<code>cmd + ← + shift</code></p><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><ul><li>删除当前行光标后的所有字符：<code>cmd + fn + delete</code></li><li>删除当前行光标前的所有字符：<code>cmd + delete</code></li><li>删除当前单词光标后的字符：<code>option + fn + delete</code></li><li>把当前单词光标前的字符删除：<code>option + delete</code></li></ul><h4 id="添加注释"><a href="#添加注释" class="headerlink" title="添加注释"></a>添加注释</h4><ul><li>注释一行代码：<code>cmd + /</code></li><li>注释一整段代码：<code>option + shift + A</code></li></ul><h4 id="格式化代码"><a href="#格式化代码" class="headerlink" title="格式化代码"></a>格式化代码</h4><p>格式化代码：<code>option + shift + F</code><br>格式化选中行代码：<code>cmd + K cmd + F</code><br>代码缩进：<code>cmd + shift + P</code></p><h4 id="文件、符号、代码之间的快速跳转"><a href="#文件、符号、代码之间的快速跳转" class="headerlink" title="文件、符号、代码之间的快速跳转"></a>文件、符号、代码之间的快速跳转</h4><ul><li><code>control+ tab</code>(同时按住)，继续按着 <code>control</code> 键，松开 <code>tab</code> 键： 打开当前打开文件的列表，选择要打开文件，松开 <code>control</code> 就能打开对应文件</li><li><code>cmd + P</code>打开最近打开文件列表，同时列表顶部出现搜索框，搜索文件名，回车（enter），可以再当前窗口打开对应文件；使用 <code>cmd + enter</code> 会在新的编辑器窗口打开这个文件</li><li><code>control + G</code>：行跳转，输入对应数字回车，可以跳转到当前文件的当前行</li><li><code>cmd + P</code>(输入文件名 + “:” + 行数)：跳转到指定文件的指定行数</li><li><code>cmd + shift + O</code>：调出当前文件的符号（函数名等），使用方向键或者搜索，回车，就能跳转到你想要的符号；如果输入“:”可以对当前文件的所有符号进行分类</li><li><code>cmd + T</code>：打开多个文件，搜索多个文件中的符号</li><li><code>F12</code>：跳转到函数的定义处</li><li><code>cmd + F12</code>：跳转到函数的实现位置；注：js 中没有接口的概念，定义和实现是相同的，所以 js 中的 F12 和 Cmd + F12 效果是一样的</li><li><code>shift + F12</code>：打开函数引用的预览（把光标放在函数或者类上，按 shift+F12 可以打开一个引用列表和内嵌编辑器）</li></ul><h4 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h4><ul><li><code>Command + Shift + P / F1</code> 显示命令面板</li><li><code>Command + P</code> 快速打开</li><li><code>Command + Shift + N </code>打开新窗口</li><li><code>Command + W</code> 关闭窗口</li></ul><h4 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h4><p><code>Command + X</code> 剪切（未选中文本的情况下，剪切光标所在行）<br><code>Command + C</code> 复制（未选中文本的情况下，复制光标所在行）</p><p><code>Option + Up</code> 向上移动行<br><code>Option + Down</code> 向下移动行<br><code>Option + Shift + Up</code> 向上复制行<br><code>Option + Shift + Down</code> 向下复制行</p><p><code>Command + Shift</code> + K 删除行<br><code>Command + Enter</code> 下一行插入<br><code>Command + Shift + Enter</code> 上一行插入<br><code>Command + Shift + \</code> 跳转到匹配的括号<br><code>Command + [</code> 减少缩进<br><code>Command + ]</code> 增加缩进<br><code>Home</code> 跳转至行首<br><code>End</code> 跳转到行尾<br><code>Command + Up</code> 跳转至文件开头<br><code>Command + Down</code> 跳转至文件结尾<br><code>Ctrl + PgUp</code> 按行向上滚动<br><code>Ctrl + PgDown</code> 按行向下滚动<br><code>Command + PgUp</code> 按屏向上滚动<br><code>Command + PgDown</code> 按屏向下滚动<br><code>Command + Shift + [</code> 折叠代码块<br><code>Command + Shift + ]</code> 展开代码块<br><code>Command + K Command + [</code> 折叠全部子代码块<br><code>Command + K Command + ]</code> 展开全部子代码块<br><code>Command + K Command + 0</code> 折叠全部代码块<br><code>Command + K Command + J</code> 展开全部代码块<br><code>Command + K Command + C</code> 添加行注释<br><code>Command + K Command + U</code> 移除行注释<br><code>Command + /</code> 添加、移除行注释<br><code>Option + Shift + A</code> 添加、移除块注释<br><code>Option + Z</code> 自动换行、取消自动换行</p><h4 id="多光标与选择"><a href="#多光标与选择" class="headerlink" title="多光标与选择"></a>多光标与选择</h4><p><code>Option + 点击</code> 插入多个光标<br><code>Command + Option + Up</code> 向上插入光标<br><code>Command + Option + Down</code> 向下插入光标<br><code>Command + U</code> 撤销上一个光标操作<br><code>Option + Shift + I</code> 在所选行的行尾插入光标<br><code>Command + I</code> 选中当前行<br><code>Command + Shift + L</code> 选中所有与当前选中内容相同部分<br><code>Command + F2</code> 选中所有与当前选中单词相同的单词<br><code>Command + Ctrl + Shift + Left</code> 折叠选中<br><code>Command + Ctrl + Shift + Right</code> 展开选中<br><code>Alt + Shift + 拖动鼠标</code> 选中代码块<br><code>Command + Shift + Option + Up</code> 列选择 向上<br><code>Command + Shift + Option + Down</code> 列选择 向下<br><code>Command + Shift + Option + Left</code> 列选择 向左<br><code>Command + Shift + Option + Right</code> 列选择 向右<br><code>Command + Shift + Option + PgUp</code> 列选择 向上翻页<br><code>Command + Shift + Option + PgDown</code> 列选择 向下翻页</p><h4 id="查找替换"><a href="#查找替换" class="headerlink" title="查找替换"></a>查找替换</h4><p><code>Command + F</code> 查找<br><code>Command + Option + F</code> 替换<br><code>Command + G</code> 查找下一个<br><code>Command + Shift + G</code> 查找上一个<br><code>Option + Enter</code> 选中所有匹配项<br><code>Command + D</code> 向下选中相同内容<br><code>Command + K Command + D</code> 移除前一个向下选中相同内容</p><h4 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h4><p><code>Ctrl + Space</code> 打开建议<br><code>Command + Shift + Space</code> 参数提示<br><code>Tab Emmet</code> 插件缩写补全<br><code>Option + Shift + F</code> 格式化<br><code>Command + K Command + F</code> 格式化选中内容<br><code>F12</code> 跳转到声明位置<br><code>Control + _</code> 返回跳转前位置<br><code>Option + F12</code> 查看具体声明内容<br><code>Command + K F12</code> 分屏查看具体声明内容<br><code>Command + .</code> 快速修复<br><code>Shift + F12</code> 显示引用<br><code>F2</code> 重命名符号<br><code>Command + Shift + .</code> 替换为上一个值<br><code>Command + Shift + ,</code> 替换为下一个值<br><code>Command + K Command + X</code> 删除行尾多余空格<br><code>Command + K M</code> 更改文件语言</p><h4 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h4><p><code>Command + T</code> 显示所有符号<br><code>Ctrl + G</code> 跳转至某行<br><code>Command + P</code> 跳转到某个文件<br><code>Command + Shift + O</code> 跳转到某个符号<br><code>Command + Shift + M</code> 打开问题面板<br><code>F8</code> 下一个错误或警告位置<br><code>Shift + F8</code> 上一个错误或警告位置<br><code>Ctrl + Shift + Tab</code> 编辑器历史记录<br><code>Ctrl + -</code> 后退<br><code>Ctrl + Shift + -</code> 前进<br><code>Ctrl + Shift + M Tab</code> 切换焦点</p><h4 id="编辑器管理"><a href="#编辑器管理" class="headerlink" title="编辑器管理"></a>编辑器管理</h4><p><code>Command + W</code> 关闭编辑器<br><code>Command + K F</code> 关闭文件夹<br><code>Command + \</code> 编辑器分屏<br><code>Command + 1</code> 切换到第一分组<br><code>Command + 2</code> 切换到第二分组<br><code>Command + 3</code> 切换到第三分组<br><code>Command + K Command + Left</code> 切换到上一分组<br><code>Command + K Command + Right</code> 切换到下一分组<br><code>Command + K Command + Shift + Left</code> 左移编辑器<br><code>Command + K Command + Shift + Right</code> 右移编辑器<br><code>Command + K Left</code> 激活左侧编辑组<br><code>Command + K Right</code> 激活右侧编辑组</p><h4 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h4><p><code>Command + N</code> 新建文件<br><code>Command + O</code> 打开文件<br><code>Command + S</code> 保存文件<br><code>Command + Shift + S</code> 另存为<br><code>Command + Option + S</code> 全部保存<br><code>Command + W</code> 关闭<br><code>Command + K Command + W</code> 全部关闭<br><code>Command + Shift + T</code> 重新打开被关闭的编辑器<br><code>Command + K Enter</code> 保持打开<br><code>Ctrl + Tab</code> 打开下一个<br><code>Ctrl + Shift + Tab</code> 打开上一个<br><code>Command + K P</code> 复制当前文件路径<br><code>Command + K R</code> 在资源管理器中查看当前文件<br><code>Command + K O</code> 新窗口打开当前文件</p><h4 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h4><p><code>Command + Ctrl + F</code> 全屏、退出全屏<br><code>Command + Option + 1</code> 切换编辑器分屏方式（横、竖）<br><code>Command + +</code> 放大<br><code>Command + -</code> 缩小<br><code>Command + B</code> 显示、隐藏侧边栏<br><code>Command + Shift + E</code> 显示资源管理器 或 切换焦点<br><code>Command + Shift + F</code> 显示搜索框<br><code>Ctrl + Shift + G</code> 显示 Git 面板<br><code>Command + Shift + D</code> 显示调试面板<br><code>Command + Shift + X</code> 显示插件面板<br><code>Command + Shift + H</code> 全局搜索替换<br><code>Command + Shift + J</code> 显示、隐藏高级搜索<br><code>Command + Shift + C</code> 打开新终端<br><code>Command + Shift + U</code> 显示输出面板<br><code>Command + Shift + V</code> Markdown 预览窗口<br><code>Command + K V</code> 分屏显示 Markdown 预览窗口</p><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p><code>F9</code> 设置 或 取消断点<br><code>F5</code> 开始 或 继续<br><code>F11</code> 进入<br><code>Shift + F11</code> 跳出<br><code>F10</code> 跳过<br><code>Command + K Command + I</code> 显示悬停信息</p><h4 id="集成终端"><a href="#集成终端" class="headerlink" title="集成终端"></a>集成终端</h4><p><code>Ctrl + 显示终端 Ctrl + Shift +</code> 新建终端<br><code>Command + Up</code> 向上滚动<br><code>Command + Down</code> 向下滚动<br><code>PgUp</code> 向上翻页<br><code>PgDown</code> 向下翻页<br><code>Command + Home</code> 滚动到顶部<br><code>Command + End</code> 滚动到底部</p><h3 id="mac-环境下-VsCode-个人开发常用快捷键"><a href="#mac-环境下-VsCode-个人开发常用快捷键" class="headerlink" title="mac 环境下 VsCode 个人开发常用快捷键"></a>mac 环境下 VsCode 个人开发常用快捷键</h3><div class="note note-info">            <p>mac 与 windows 键盘上功能键对应：</p><table><thead><tr><th align="center">mac</th><th align="center">windows</th></tr></thead><tbody><tr><td align="center">Command</td><td align="center">Alt</td></tr><tr><td align="center">Control</td><td align="center">Ctrl</td></tr><tr><td align="center">Option</td><td align="center">Win</td></tr></tbody></table>          </div><h4 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h4><ul><li>单行注释：<code>Control + /</code></li><li>取消单行注释：<code>Control+k,Control + u</code> (按下 Control 不放，再按 k + u)</li><li>多行注释：<code>Command + shift + A</code></li><li>多行注释：<code>/**</code></li></ul><p>移动行：<code>option + up/down</code><br>显示&#x2F;隐藏左侧目录栏 <code>Command + b</code><br>向上&#x2F;下复制当前行：<code>shift + option +up/down</code><br>删除当前行：<code>Control + CapsLock + k</code><br>删除当前行：<code>Command + Shift + k</code><br>控制台终端显示与隐藏：<code>Control + ~</code><br>查找文件&#x2F;安装 vs code 插件地址：<code>Command + p</code><br>代码格式化：<code>shift + Command +f</code><br>新建一个窗口 : <code>Command + shift + n</code><br>行增加缩进: <code>Command + [</code><br>行减少缩进: <code>Command + ]</code><br>裁剪尾随空格(去掉一行的末尾那些没用的空格) : <code>Control + shift + x</code><br>字体放大&#x2F;缩小: <code>Control + ( + 或 - )</code><br>切换到指定窗口 : <code>Control + 1/2/3</code><br>切换到上一个编辑的窗口 : <code>Control + Tab</code><br>关闭或开启拆分窗口 : <code>Control + Command + left/right</code><br>关闭编辑器窗口 : <code>Command + w</code><br>关闭所有窗口 : <code>Command + q</code><br>切换到桌面 : <code>F11</code><br>显示 git : <code>Control + shift + g</code><br>全局查找&#x2F;替换文件：<code>Command + shift + h</code><br>显示相关插件的命令(如：git log)：<code>Command + shift + p</code><br>选中文字：<code>shift + left / right / up / down</code><br>删除行 ： <code>Command + shift + k</code><br>快速回到顶部 ： <code>Command + up</code><br>快速回到底部 : <code>Command + down</code><br>选中代码 ： <code>shift + 鼠标左键</code><br>多行同时添加内容（光标） ：<code>command + option + up/down</code><br>鼠标位置向前删除一个字符：<code>Control + h</code><br>鼠标位置向后删除一个字符：<code>Control + d</code><br>打开最近打开的文件：<code>Control + r</code><br>打开控制台：<code>Control + ~</code>（英文模式下）<br>打开新的控制台：<code>Control + shift + ~</code><br>跳转到指定行：<code>Control + g</code></p><!--  折叠代码： Control + k + 0-9 (0 是完全折叠)  展开代码： Control + k + j (完全展开代码)-->]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VsCode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go开发常用命令</title>
    <link href="/2023/07/10/Go%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/07/10/Go%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="交叉编译"><a href="#交叉编译" class="headerlink" title="交叉编译"></a>交叉编译</h3><h4 id="Mac-下编译，-Linux-或者-Windows-下执行"><a href="#Mac-下编译，-Linux-或者-Windows-下执行" class="headerlink" title="Mac 下编译， Linux 或者 Windows 下执行"></a>Mac 下编译， Linux 或者 Windows 下执行</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># linux 下执行</span><br>CGO_ENABLED=0  GOOS=linux  GOARCH=amd64  go build main.go<br><span class="hljs-comment"># Windows 下执行</span><br>CGO_ENABLED=0 GOOS=windows  GOARCH=amd64  go  build  main.go<br></code></pre></td></tr></table></figure><h4 id="Linux-下编译-，-Mac-或者-Windows-下执行"><a href="#Linux-下编译-，-Mac-或者-Windows-下执行" class="headerlink" title="Linux 下编译 ， Mac 或者 Windows 下执行"></a>Linux 下编译 ， Mac 或者 Windows 下执行</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Mac  下执行</span><br>CGO_ENABLED=0 GOOS=darwin  GOARCH=amd64  go build main.go<br><span class="hljs-comment"># Windows 下执行</span><br>CGO_ENABLED=0 GOOS=windows  GOARCH=amd64  go build main.go<br></code></pre></td></tr></table></figure><h4 id="Windows-下执行-，-Mac-或-Linux-下执行"><a href="#Windows-下执行-，-Mac-或-Linux-下执行" class="headerlink" title="Windows 下执行 ， Mac 或 Linux 下执行"></a>Windows 下执行 ， Mac 或 Linux 下执行</h4><p>需要写一个批处理程序，在里面去设置，因为 windows 下的 terminal 不支持 shell , 这跟 Mac 和 Linux 下的有点不同</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Mac 下执行</span><br>SET  CGO_ENABLED=0<br>SET GOOS=darwin<br>SET GOARCH=amd64<br>go build main.go<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># Linux 去执行</span><br>SET CGO_ENABLED=0<br>SET GOOS=linux<br>SET GOARCH=amd64<br>go build main.go<br></code></pre></td></tr></table></figure><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li><strong>CGO_ENABLED</strong> : CGO 表示 golang 中的工具，CGO_ENABLED 表示 CGO 禁用，交叉编译中不能使用 CGO 的</li><li><strong>GOOS</strong> : 目标平台<ul><li>mac 对应 <strong>darwin</strong></li><li>linux 对应 <strong>linux</strong></li><li>windows 对应 <strong>windows</strong></li></ul></li><li><strong>GOARCH</strong> : 目标平台的体系架构【386，amd64,arm】, 目前市面上的个人电脑一般都是 amd64 架构的<ul><li>386 也称 x86 对应 32 位操作系统</li><li>amd64 也称 x64 对应 64 位操作系统</li><li>arm 这种架构一般用于嵌入式开发。 比如 Android ， IOS ， Win mobile , TIZEN 等</li></ul></li></ul><p><strong>linux 或者 Mac 下 go build 前面的参数为何需要那样设置？</strong></p><p><strong>go env</strong> 可以列出我们的 golang 默认环境变量，在 shell 中当我们只想一次性更改其环境变量时，就可以通过在 shell 中设置变量的方式来更改这个环境变量。</p>]]></content>
    
    
    <categories>
      
      <category>命令语句</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用JWT进行身份验证</title>
    <link href="/2023/07/10/%E4%BD%BF%E7%94%A8JWT%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/"/>
    <url>/2023/07/10/%E4%BD%BF%E7%94%A8JWT%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><h3 id="1-1-JSON-Web-Token"><a href="#1-1-JSON-Web-Token" class="headerlink" title="1.1 JSON Web Token"></a>1.1 JSON Web Token</h3><p><code>jwt</code> 是 <code>json web token</code> 的简称。</p><p>JSON Web Token (JWT) 是一种开放标准 ( RFC 7519 )，它定义了一种紧凑且独立的方式，用于在各方之间安全地传输信息作为 JSON 对象。此信息可以被验证和信任，因为它是经过数字签名的。JWT 可以使用密码（使用 <strong>HMAC</strong> 算法）或使用 <strong>RSA</strong> 或 <strong>ECDSA</strong> 的公钥&#x2F;私钥对进行签名。</p><h3 id="1-2-JWT-的使用场景"><a href="#1-2-JWT-的使用场景" class="headerlink" title="1.2 JWT 的使用场景"></a>1.2 JWT 的使用场景</h3><ul><li><strong>授权</strong>：这是使用 JWT 最常见的场景。用户登录后，每个后续请求都将包含 JWT，允许用户访问该令牌允许的路由、服务和资源。单点登录是如今广泛使用 JWT 的一项功能，因为它的开销很小并且能够轻松跨不同域使用。</li><li><strong>信息交换</strong>：JSON Web Tokens 是在各方之间安全传输信息的好方法。因为 JWT 可以签名——例如，使用公钥&#x2F;私钥对——你可以确定发送者是他们所说的人。此外，由于签名是使用标头和有效负载计算的，因此还可以验证内容是否未被篡改。</li></ul><h3 id="1-3-JWT-的结构"><a href="#1-3-JWT-的结构" class="headerlink" title="1.3 JWT 的结构"></a>1.3 JWT 的结构</h3><p>JWT 由三部分组成，由点 ( . ) 分隔，它们是：</p><ul><li>Header（标头）</li><li>Payload（有效载荷）</li><li>Signature（签名）</li></ul><p>JWT 通常如下所示：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">xxxxx.yyyyy.zzzzz<br></code></pre></td></tr></table></figure><h4 id="1-3-1-Header"><a href="#1-3-1-Header" class="headerlink" title="1.3.1 Header"></a>1.3.1 Header</h4><p><code>Header</code> <strong>通常</strong>由两部分组成：令牌的类型，即 JWT，以及所使用的签名算法，例如 <code>HMAC SHA256</code> 或 <code>RSA</code>。</p><p>例如：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">&#123;<br>  &quot;alg&quot;: &quot;HS256&quot;,<br>  &quot;typ&quot;: &quot;JWT&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，这个 JSON 被 <code>**Base64Url**</code> 编码以形成 JWT 的第一部分。</p><h4 id="1-3-2-Payload"><a href="#1-3-2-Payload" class="headerlink" title="1.3.2 Payload"></a>1.3.2 Payload</h4><p><code>token</code> 的第二部分是 Payload，由 <code>claims</code> 组成。</p><p><code>claims</code> 关于实体（通常是用户）和附加数据的描述。</p><p><code>claims</code> 分为三种类型：</p><p><code>registered claims（注册声明）</code></p><p><code>public claims（公共声明）</code></p><p><code>private claims（隐私声明）</code></p><ul><li><p><a href="https://datatracker.ietf.org/doc/html/rfc7519#section-4.1">registered claims（已注册声明）</a>：这这些是一组预定义的声明，它们不是强制性的，但建议使用，以提供一组有用的、可互操作的声明。其中一些是： <strong>iss</strong>（发行者）、 <strong>exp</strong>（到期时间）、 <strong>sub</strong>（主题）、 <strong>aud</strong>（受众）和<a href="">其他</a>。</p></li><li><p><a href="https://datatracker.ietf.org/doc/html/rfc7519#section-4.2">public claims（公共声明）</a>：这些可以由使用 JWT 的人随意定义。但是为了避免冲突，它们应该在<a href="">IANA JSON Web 令牌注册表</a>中定义，或者定义为包含抗冲突名称空间的 URI。</p></li><li><p><a href="https://datatracker.ietf.org/doc/html/rfc7519#section-4.3">private claims（隐私声明）</a>：这些是为在同意使用它们的各方之间共享信息而创建的自定义声明，既不是注册声明也不是公共声明。</p></li></ul><p>一个有效的 Payload 应该是：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;sub&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1234567890&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;John Doe&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;admin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="1-3-3-Signature"><a href="#1-3-3-Signature" class="headerlink" title="1.3.3 Signature"></a>1.3.3 Signature</h4><p>要创建签名部分，必须采用编码 Header、编码 Payload、 <code>secret</code> 、指定的算法，然后对其进行签名。</p><p>例如，如果要使用 HMAC SHA256 算法，将按以下方式创建签名：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">HMACSHA256(<br>  base64UrlEncode(header) + &quot;.&quot; +<br>  base64UrlEncode(payload),<br>  secret)<br></code></pre></td></tr></table></figure><p>签名用于验证消息在此过程中没有被更改，并且在使用私钥签名的令牌的情况下，它还可以验证 JWT 的发送者是否如其所说。</p><h4 id="1-3-4-组合-Header、Payload、Signature"><a href="#1-3-4-组合-Header、Payload、Signature" class="headerlink" title="1.3.4 组合 Header、Payload、Signature"></a>1.3.4 组合 Header、Payload、Signature</h4><p>输出由点分隔的三个 Base64-URL 字符串，可以在 HTML 和 HTTP 环境中轻松传递，同时与基于 XML 的标准（如 SAML）相比更加紧凑。</p><p>下面显示了一个 JWT，它对前面的标头和有效负载进行了编码，并使用私钥进行了签名。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">eyJhbGci0iJIUzI1NiIsInR5cCI6IkpXVCJ9.<br>eyJzdWIi0iIxMiMONTY30DkwIiwibmFtZSI6IkpvaG4<br>gRG91IiwiaXNTb2NpYWwi0nRydWV9.<br>4pcPMD0901PSyXnrXCiTwXyr4BsezdI1AVTmud2fU4<br></code></pre></td></tr></table></figure><p>目前， <code>Go</code> 主流使用的 <code>jwt</code> 库是 <code>golang-jwt/jwt</code> 。</p><h3 id="1-4-JWT-如何工作？"><a href="#1-4-JWT-如何工作？" class="headerlink" title="1.4 JWT 如何工作？"></a>1.4 JWT 如何工作？</h3><p>在身份验证中，当用户使用其身份成功登录时，将返回一个 JSON Web Token。由于 token 是凭据，因此必须非常小心以防止出现安全问题。通常，不应该将令牌保留的时间超过要求的时间。</p><p>每当用户想要访问受保护的路由或资源时，用户代理都应发送 JWT，通常使用在 <strong>Bearer 模式的 Authorization</strong> 标头中。标头的内容应如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">Authorization: Bearer <span class="hljs-tag">&lt;<span class="hljs-name">token</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在某些情况下，可以是无状态授权机制。服务器的受保护路由将检查标头中是否存在有效的 JWT <code>Authorization</code>，如果存在，则允许用户访问受保护的资源。如果 JWT 包含必要的数据，则可能会减少为某些操作查询数据库的需要。</p><p>使用 HTTP 标头发送 JWT ，需要尽量防止它们太大。有些服务器不接受超过 8 KB 的标头。试图在 JWT 令牌中嵌入过多信息，例如通过包含所有用户的权限，需要寻找替代解决方案，例如<a href="https://auth0.com/developers/lab/fine-grained-authorization">Auth0 Fine-Grained Authorization</a>。</p><p>如果 token 在 <code>Authorization</code> 标头中发送，跨源资源共享 (CORS) 将不会成为问题，因为它不使用 cookie。</p><h3 id="1-5-JWT-的优势"><a href="#1-5-JWT-的优势" class="headerlink" title="1.5 JWT 的优势"></a>1.5 JWT 的优势</h3><p><strong>JSON Web Tokens (JWT) 与 Simple Web Tokens (SWT) 和 Security Assertion Markup Language Tokens (SAML)</strong> 相比的优势：</p><p>由于 JSON 比 XML 更简洁，因此在编码时它的大小也更小，使 JWT 比 SAML 更紧凑。这使得 JWT 成为在 HTML 和 HTTP 环境中传递的不错选择。</p><p>安全方面，SWT 只能通过使用 HMAC 算法的共享密钥进行对称签名。但是，JWT 和 SAML 令牌可以使用 X.509 证书形式的公钥&#x2F;私钥对进行签名。与签署 JSON 的简单性相比，使用 XML 数字签名签署 XML 而不会引入模糊的安全漏洞是非常困难的。</p><p>JSON 解析器在大多数编程语言中都很常见，因为它们直接映射到对象。相反，XML 没有自然的文档到对象的映射。这使得使用 JWT 比使用 SAML 断言更容易。</p><p>关于使用，JWT 用于互联网规模。这凸显了客户端在多个平台（尤其是移动平台）上处理 JSON Web 令牌的便利性。</p><h2 id="二、golang-jwt-x2F-jwt"><a href="#二、golang-jwt-x2F-jwt" class="headerlink" title="二、golang-jwt&#x2F;jwt"></a>二、golang-jwt&#x2F;jwt</h2><h3 id="安装-jwt-包"><a href="#安装-jwt-包" class="headerlink" title="安装 jwt 包"></a>安装 jwt 包</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">go</span> get -u github.com/golang-jwt/jwt/v5<br></code></pre></td></tr></table></figure><h3 id="主流的两种加密算法"><a href="#主流的两种加密算法" class="headerlink" title="主流的两种加密算法"></a>主流的两种加密算法</h3><table><thead><tr><th align="left">加密算法</th><th align="left">代表算法</th><th align="left">加解密</th><th align="left">区别</th></tr></thead><tbody><tr><td align="left">对称加密算法</td><td align="left">HS256（最常用）、HS384、HS512</td><td align="left">期望[]byte 用于签名和验证的值</td><td align="left">签名和验证密钥是相同的，两者必须受到同等保护（并且绝对不应该存储在您的代码中）</td></tr><tr><td align="left">非对称加密算法</td><td align="left">RS256（最常用）、RS384、RS512</td><td align="left">rsa.PrivateKey 用于签名和*rsa.PublicKey 用于验证</td><td align="left">私钥（必须保密）用于签名，相应的公钥（可以自由传输）用于验证令牌。</td></tr></tbody></table><h2 id="三、代码实现-对称加密-hsa（hash-加密）"><a href="#三、代码实现-对称加密-hsa（hash-加密）" class="headerlink" title="三、代码实现-对称加密 hsa（hash 加密）"></a>三、代码实现-对称加密 hsa（hash 加密）</h2><h3 id="3-1-加密生成-token"><a href="#3-1-加密生成-token" class="headerlink" title="3.1 加密生成 token"></a>3.1 加密生成 token</h3><p>使用 <code>jwt.NewWithClaims()</code> 方法来生成 token，官方的源码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewWithClaims</span><span class="hljs-params">(method SigningMethod, claims Claims, opts ...TokenOption)</span></span> *Token &#123;<br><span class="hljs-keyword">return</span> &amp;Token&#123;<br>Header: <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;&#123;<br><span class="hljs-string">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span>,<br><span class="hljs-string">&quot;alg&quot;</span>: method.Alg(),<br>&#125;,<br>Claims: claims,<br>Method: method,<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-生成-token-并使用-hs256-加密方法进行加密"><a href="#3-2-生成-token-并使用-hs256-加密方法进行加密" class="headerlink" title="3.2 生成 token 并使用 hs256 加密方法进行加密"></a>3.2 生成 token 并使用 hs256 加密方法进行加密</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> User <span class="hljs-keyword">struct</span> &#123;<br>    ID     <span class="hljs-type">int64</span><br>    Name   <span class="hljs-type">string</span><br>    Age    <span class="hljs-type">int</span><br>    Gender <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-keyword">type</span> UserClaims <span class="hljs-keyword">struct</span> &#123;<br>    User User<br>    jwt.RegisteredClaims<br>&#125;<br><br><span class="hljs-comment">// CreateHs256Token 生成一个token并使用hs256加密方法进行加密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CreateHs256Token</span><span class="hljs-params">()</span></span> &#123;<br>    user := User&#123;<br>        ID:     <span class="hljs-number">1</span>,<br>        Name:   <span class="hljs-string">&quot;LiHua&quot;</span>,<br>        Age:    <span class="hljs-number">18</span>,<br>        Gender: <span class="hljs-string">&quot;男&quot;</span>,<br>    &#125;<br>    fmt.Println(user)<br>    userClaims := UserClaims&#123;<br>        User:             user,<br>        RegisteredClaims: jwt.RegisteredClaims&#123;&#125;,<br>    &#125;<br>    token := jwt.NewWithClaims(jwt.SigningMethodHS256, userClaims)<br><br>    hs256Token, err := token.SignedString([]<span class="hljs-type">byte</span>(common.PriKey))<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;Error: &quot;</span>, err)<br>    &#125;<br>    fmt.Println(<span class="hljs-string">&quot;hs256: &quot;</span>, hs256Token)<br>    ParseHs256Token(hs256Token)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-解密-token-得到原始数据"><a href="#3-3-解密-token-得到原始数据" class="headerlink" title="3.3 解密 token 得到原始数据"></a>3.3 解密 token 得到原始数据</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// ParseHs256Token 解析hs256加密方法加密的token</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ParseHs256Token</span><span class="hljs-params">(hs256Token <span class="hljs-type">string</span>)</span></span> &#123;<br>    token, err := jwt.ParseWithClaims(hs256Token, &amp;UserClaims&#123;&#125;, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(t *jwt.Token)</span></span> (<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-type">error</span>) &#123;<br><br>        <span class="hljs-keyword">return</span> []<span class="hljs-type">byte</span>(common.PriKey), <span class="hljs-literal">nil</span><br>    &#125;)<br>    <span class="hljs-keyword">if</span> userClaims, ok := token.Claims.(*UserClaims); ok &amp;&amp; token.Valid &#123;<br>        fmt.Println(userClaims, userClaims.RegisteredClaims.Issuer)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        fmt.Println(err)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="四、代码实现-非对称加密-rsa（rs256-加密）"><a href="#四、代码实现-非对称加密-rsa（rs256-加密）" class="headerlink" title="四、代码实现-非对称加密 rsa（rs256 加密）"></a>四、代码实现-非对称加密 rsa（rs256 加密）</h2><h3 id="4-1-生成-rsa-私钥和公钥"><a href="#4-1-生成-rsa-私钥和公钥" class="headerlink" title="4.1 生成 rsa 私钥和公钥"></a>4.1 生成 rsa 私钥和公钥</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">生成私钥<br>openssl genrsa -out private-key.pem<br>生成公钥<br>openssl rsa -<span class="hljs-keyword">in</span> private-key.pem -pubout -out public-key.pem<br></code></pre></td></tr></table></figure><h3 id="4-2-生成-token-并使用-rs256-加密方法进行加密"><a href="#4-2-生成-token-并使用-rs256-加密方法进行加密" class="headerlink" title="4.2 生成 token 并使用 rs256 加密方法进行加密"></a>4.2 生成 token 并使用 rs256 加密方法进行加密</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// CreateRs256Token 生成一个token并使用rs256加密方法进行加密</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">CreateRs256Token</span><span class="hljs-params">()</span></span> &#123;<br>    user := User&#123;<br>        ID:     <span class="hljs-number">2</span>,<br>        Name:   <span class="hljs-string">&quot;Lisa&quot;</span>,<br>        Gender: <span class="hljs-string">&quot;女&quot;</span>,<br>    &#125;<br>    userClaims := UserClaims&#123;<br>        User:             user,<br>        RegisteredClaims: jwt.RegisteredClaims&#123;&#125;,<br>    &#125;<br>    privateKeyDataPem, err := os.ReadFile(<span class="hljs-string">&quot;key/private-key.pem&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;Error: &quot;</span>, err)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    privateKey, err := jwt.ParseRSAPrivateKeyFromPEM(privateKeyDataPem)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;Error: &quot;</span>, err)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    token := jwt.NewWithClaims(jwt.SigningMethodRS256, userClaims)<br><br>    rs256Token, err := token.SignedString(privateKey)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;Error: &quot;</span>, err)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    fmt.Println(<span class="hljs-string">&quot;rsa256: &quot;</span>, rs256Token)<br>    ParseRs256Token(rs256Token)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-解密-token-得到原始数据"><a href="#4-3-解密-token-得到原始数据" class="headerlink" title="4.3 解密 token 得到原始数据"></a>4.3 解密 token 得到原始数据</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// ParseRs256Token 解析rs256加密方法加密的的token</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ParseRs256Token</span><span class="hljs-params">(rs256Token <span class="hljs-type">string</span>)</span></span> &#123;<br>    token, err := jwt.ParseWithClaims(rs256Token, &amp;UserClaims&#123;&#125;, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(t *jwt.Token)</span></span> (<span class="hljs-keyword">interface</span>&#123;&#125;, <span class="hljs-type">error</span>) &#123;<br>        publicKeyDataPem, err := os.ReadFile(<span class="hljs-string">&quot;key/public-key.pem&quot;</span>)<br>        <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>            fmt.Println(<span class="hljs-string">&quot;Error: &quot;</span>, err)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>        &#125;<br>        <span class="hljs-keyword">return</span> jwt.ParseRSAPublicKeyFromPEM(publicKeyDataPem)<br>    &#125;)<br><br>    <span class="hljs-keyword">if</span> userClaims, ok := token.Claims.(*UserClaims); ok &amp;&amp; token.Valid &#123;<br>        fmt.Println(userClaims, userClaims.RegisteredClaims.Issuer)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        fmt.Println(<span class="hljs-string">&quot;Errors: &quot;</span>, err.Error())<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="HTTPS-的加密流程"><a href="#HTTPS-的加密流程" class="headerlink" title="HTTPS 的加密流程"></a>HTTPS 的加密流程</h2><p>HTTPS 组合使用了对称加密和非对称加密</p><p>服务端生成了一对公钥和私钥，把公钥和证书发给客户端<br>客户端验证了证书真伪<br>客户端生成一个随机值，用公钥加密发给了服务端<br>服务端用私钥解密，获取了随机值<br>服务端使用该随机值作为密钥和客户端进通信</p><p>服务端的公钥和私钥就是非对称加密，客户端生成的随机值作为密钥来通信就是对称加密</p>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>Go</tag>
      
      <tag>jwt鉴权</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用类型转换</title>
    <link href="/2023/07/10/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <url>/2023/07/10/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="Go-中常用的类型转换方法"><a href="#Go-中常用的类型转换方法" class="headerlink" title="Go 中常用的类型转换方法"></a>Go 中常用的类型转换方法</h2><h3 id="int-类型之间的相互转换"><a href="#int-类型之间的相互转换" class="headerlink" title="int 类型之间的相互转换"></a>int 类型之间的相互转换</h3><h4 id="int-和-int64-互转"><a href="#int-和-int64-互转" class="headerlink" title="int 和 int64 互转"></a>int 和 int64 互转</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// int 转 int64</span><br><span class="hljs-keyword">var</span> n <span class="hljs-type">int</span> = <span class="hljs-number">97</span><br>m := <span class="hljs-type">int64</span>(n)<br><br><span class="hljs-comment">// int64 转 int</span><br><span class="hljs-keyword">var</span> n <span class="hljs-type">int64</span> = <span class="hljs-number">97</span><br>m := <span class="hljs-type">int</span>(n)<br></code></pre></td></tr></table></figure><h4 id="int-和-uint64-互转"><a href="#int-和-uint64-互转" class="headerlink" title="int 和 uint64 互转"></a>int 和 uint64 互转</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// int 转 uint64</span><br><span class="hljs-keyword">var</span> n <span class="hljs-type">int</span> = <span class="hljs-number">97</span><br>m := <span class="hljs-type">uint64</span>(n)<br><br><span class="hljs-comment">// uint64 转 int</span><br><span class="hljs-keyword">var</span> n <span class="hljs-type">uint64</span> = <span class="hljs-number">97</span><br>m := <span class="hljs-type">int</span>(n)<br></code></pre></td></tr></table></figure><h4 id="int-与-float64-类型的相互转换"><a href="#int-与-float64-类型的相互转换" class="headerlink" title="int 与 float64 类型的相互转换"></a>int 与 float64 类型的相互转换</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// int 转 float64</span><br><span class="hljs-keyword">var</span> i <span class="hljs-type">int</span> = <span class="hljs-number">10</span><br>f := <span class="hljs-type">float64</span>(i)<br><br><span class="hljs-comment">// float64 转 int</span><br><span class="hljs-keyword">var</span> f <span class="hljs-type">float64</span> <span class="hljs-number">12.12</span><br>i := <span class="hljs-type">int</span>(f)<br></code></pre></td></tr></table></figure><h3 id="字符串与其它类型相互转换"><a href="#字符串与其它类型相互转换" class="headerlink" title="字符串与其它类型相互转换"></a>字符串与其它类型相互转换</h3><p><strong>与字符串相关的类型转换都是通过 strconv 包实现的</strong></p><h4 id="strconv-IntSize"><a href="#strconv-IntSize" class="headerlink" title="strconv.IntSize"></a>strconv.IntSize</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">strconv.IntSize<br><br><span class="hljs-keyword">const</span> strconv.IntSize untyped <span class="hljs-type">int</span> = <span class="hljs-number">64</span>  <span class="hljs-comment">// 64 位系统</span><br><span class="hljs-comment">// 获取程序运行的操作系统平台下 int 类型所占的位数</span><br></code></pre></td></tr></table></figure><h4 id="int-转-string"><a href="#int-转-string" class="headerlink" title="int 转 string"></a>int 转 string</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">strconv</span>.<span class="hljs-title">Itoa</span><span class="hljs-params">(i <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">string</span><br><span class="hljs-comment">// 返回数字 i 所表示的字符串类型的十进制数</span><br></code></pre></td></tr></table></figure><h4 id="float64-转-string"><a href="#float64-转-string" class="headerlink" title="float64 转 string"></a>float64 转 string</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">strconv</span>.<span class="hljs-title">FormatFloat</span><span class="hljs-params">(f <span class="hljs-type">float64</span>, fmt <span class="hljs-type">byte</span>, prec <span class="hljs-type">int</span>, bitSize <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">string</span><br><span class="hljs-comment">// 将 64 位浮点型的数字转换为字符串，其中 fmt 表示格式（其值可以是 &#x27;b&#x27;、&#x27;e&#x27;、&#x27;f&#x27; 或 &#x27;g&#x27;），prec 表示精度，bitSize 则使用 32 表示 float32，用 64 表示 float64</span><br></code></pre></td></tr></table></figure><h4 id="string-转-int"><a href="#string-转-int" class="headerlink" title="string 转 int"></a>string 转 int</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">strconv</span>.<span class="hljs-title">Atoi</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">error</span>)<br><span class="hljs-comment">// 将字符串转换为 int 型</span><br></code></pre></td></tr></table></figure><h4 id="string-转-float64"><a href="#string-转-float64" class="headerlink" title="string 转 float64"></a>string 转 float64</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">strconv</span>.<span class="hljs-title">ParseFloat</span><span class="hljs-params">(s <span class="hljs-type">string</span>, bitSize <span class="hljs-type">int</span>)</span></span> (<span class="hljs-type">float64</span>, <span class="hljs-type">error</span>)<br><span class="hljs-comment">// 将字符串转换为 float64 型</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串处理</title>
    <link href="/2023/07/10/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/"/>
    <url>/2023/07/10/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="Go-中常用的字符串处理方法"><a href="#Go-中常用的字符串处理方法" class="headerlink" title="Go 中常用的字符串处理方法"></a>Go 中常用的字符串处理方法</h2><h3 id="strings-Split"><a href="#strings-Split" class="headerlink" title="strings.Split"></a>strings.Split</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">strings</span>.<span class="hljs-title">Split</span><span class="hljs-params">(s <span class="hljs-type">string</span>, sep <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">string</span><br><span class="hljs-comment">// 将切片 s 拆分为所有由 sep 分隔的子字符串，并返回这些分隔符之间的子字符串切片。</span><br><span class="hljs-comment">// 如果 sep 为空，返回 UTF-8 字符数组。</span><br><span class="hljs-comment">// strings.Split(&quot;abc&quot;,&quot;&quot;) =&gt; [a b c]</span><br></code></pre></td></tr></table></figure><h3 id="strings-Fields"><a href="#strings-Fields" class="headerlink" title="strings.Fields"></a>strings.Fields</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fields</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">string</span><br><span class="hljs-comment">// 返回一个用一个或多个连续的空格分隔的字符串 s 的子字符串的数组（slice），返回的数组中不含有空格</span><br><span class="hljs-comment">// strings.Fields(&quot;  abc def  gh i  jk  &quot;) =&gt; [&quot;abc&quot;,&quot;def&quot;,&quot;gh&quot;,&quot;i&quot;,&quot;jk&quot;]</span><br></code></pre></td></tr></table></figure><h3 id="strings-FieldsFunc"><a href="#strings-FieldsFunc" class="headerlink" title="strings.FieldsFunc"></a>strings.FieldsFunc</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// Unicode 代码点 c 进行分隔：满足 f(c) 返回 true。该函数返回[]string。如果字符串 s 中所有的代码点 (unicode code points) 都满足 f(c) 或者 s 是空，则 FieldsFunc 返回空 slice。</span><br><br><span class="hljs-comment">// 示例</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>str := <span class="hljs-string">&quot;ahbhchdhehfh&quot;</span><br>fmt.Println(strings.FieldsFunc(str, cs)) <span class="hljs-comment">// =&gt; [a b c d e f]</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">cs</span><span class="hljs-params">(c <span class="hljs-type">rune</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">return</span> c == <span class="hljs-string">&#x27;h&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="strings-Contains、strings-ContainsAny、strings-ContainsRune"><a href="#strings-Contains、strings-ContainsAny、strings-ContainsRune" class="headerlink" title="strings.Contains、strings.ContainsAny、strings.ContainsRune"></a>strings.Contains、strings.ContainsAny、strings.ContainsRune</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Contains</span><span class="hljs-params">(s, substr <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span><br><span class="hljs-comment">// 判断字符串 s 中是否含有 substr 字符</span><br><span class="hljs-comment">// strings.Contains(&quot;abc&quot;,&quot;a&quot;) =&gt; true</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ContainsAny</span><span class="hljs-params">(s, chars <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span><br><span class="hljs-comment">// chars 中任何一个 Unicode 代码点在 s 中，返回 true</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ContainsRune</span><span class="hljs-params">(s <span class="hljs-type">string</span>, r <span class="hljs-type">rune</span>)</span></span> <span class="hljs-type">bool</span><br><span class="hljs-comment">// Unicode 代码点 r 在 s 中，返回 true</span><br></code></pre></td></tr></table></figure><h3 id="strings-Replace"><a href="#strings-Replace" class="headerlink" title="strings.Replace"></a>strings.Replace</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">strings</span>.<span class="hljs-title">Replace</span><span class="hljs-params">(s <span class="hljs-type">string</span>, old <span class="hljs-type">string</span>, <span class="hljs-built_in">new</span> <span class="hljs-type">string</span>, n <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">string</span><br><span class="hljs-comment">// 返回 s 的副本，使用 new 替换前 n 个 old 字符（如果 n&lt;0，则替换没有次数限制）</span><br><span class="hljs-comment">// strings.Replace(&quot;abc&quot;,&quot;b&quot;,&quot;d&quot;,-1) =&gt; adc</span><br></code></pre></td></tr></table></figure><h3 id="strings-HasPrefix、strings-HasSuffix"><a href="#strings-HasPrefix、strings-HasSuffix" class="headerlink" title="strings.HasPrefix、strings.HasSuffix"></a>strings.HasPrefix、strings.HasSuffix</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HasPrefix</span><span class="hljs-params">(s <span class="hljs-type">string</span>, prefix <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span><br><span class="hljs-comment">// 判断字符串 s 是否以 prefix 开头</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">HasSuffix</span><span class="hljs-params">(s <span class="hljs-type">string</span>, suffix <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span><br><span class="hljs-comment">// 判断字符串 s 是否以 suffix 结尾</span><br></code></pre></td></tr></table></figure><h3 id="strings-Index、strings-LastIndex、strings-IndexRune"><a href="#strings-Index、strings-LastIndex、strings-IndexRune" class="headerlink" title="strings.Index、strings.LastIndex、strings.IndexRune"></a>strings.Index、strings.LastIndex、strings.IndexRune</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Index</span><span class="hljs-params">(s <span class="hljs-type">string</span>, substr <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">int</span><br><span class="hljs-comment">// 返回字符串 str 在字符串 s 中第一次出现的索引（str 的第一个字符的索引），-1 表示字符串 s 不包含字符串 str</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">LastIndex</span><span class="hljs-params">(s <span class="hljs-type">string</span>, substr <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">int</span><br><span class="hljs-comment">// 返回字符串 str 在字符串 s 中最后出现位置的索引</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">IndexRune</span><span class="hljs-params">(s <span class="hljs-type">string</span>, r <span class="hljs-type">rune</span>)</span></span> <span class="hljs-type">int</span><br><span class="hljs-comment">// 查询非 ASCII 编码的字符在父字符串中的位置</span><br></code></pre></td></tr></table></figure><h3 id="strings-Count"><a href="#strings-Count" class="headerlink" title="strings.Count"></a>strings.Count</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Count</span><span class="hljs-params">(s <span class="hljs-type">string</span>, substr <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">int</span><br><span class="hljs-comment">// 计算字符串 str 在字符串 s 中出现的非重叠次数</span><br></code></pre></td></tr></table></figure><h3 id="strings-ToLower、strings-ToUpper"><a href="#strings-ToLower、strings-ToUpper" class="headerlink" title="strings.ToLower、strings.ToUpper"></a>strings.ToLower、strings.ToUpper</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ToUpper</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span><br><span class="hljs-comment">// 将字符串中的 Unicode 字符全部转换为相应的小写字符</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ToUpper</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span><br><span class="hljs-comment">// 将字符串中的 Unicode 字符全部转换为相应的大写字符</span><br></code></pre></td></tr></table></figure><h3 id="strings-Trim、strings-TrimSpace、TrimLeft、TrimRight"><a href="#strings-Trim、strings-TrimSpace、TrimLeft、TrimRight" class="headerlink" title="strings.Trim、strings.TrimSpace、TrimLeft、TrimRight"></a>strings.Trim、strings.TrimSpace、TrimLeft、TrimRight</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Trim</span><span class="hljs-params">(s <span class="hljs-type">string</span>, cutset <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span><br><span class="hljs-comment">// 剔除字符串 s 中的指定字符 cutset</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TrimSpace</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span><br><span class="hljs-comment">// 剔除字符串 s 开头和结尾的空白符号</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TrimLeft</span><span class="hljs-params">(s <span class="hljs-type">string</span>, cutset <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span><br><span class="hljs-comment">// 剔除字符串 s 开头的指定字符 cutset</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TrimRight</span><span class="hljs-params">(s <span class="hljs-type">string</span>, cutset <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span><br><span class="hljs-comment">// 剔除字符串 s 结尾的指定字符 cutset</span><br></code></pre></td></tr></table></figure><h3 id="strings-Join"><a href="#strings-Join" class="headerlink" title="strings.Join"></a>strings.Join</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Join</span><span class="hljs-params">(elems []<span class="hljs-type">string</span>, sep <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span><br><span class="hljs-comment">// 使用分割字符 sep 将 string类型的 切片 elems 拼接成一个字符串</span><br></code></pre></td></tr></table></figure><h3 id="strings-NewReader"><a href="#strings-NewReader" class="headerlink" title="strings.NewReader"></a>strings.NewReader</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewReader</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> *strings.Reader<br><span class="hljs-comment">// 用于生成一个 Reader 并读取字符串中的内容，然后返回指向该 Reader 的指针</span><br><br><span class="hljs-comment">// Read() 从 []byte 中读取内容。</span><br><span class="hljs-comment">// ReadByte() 和 ReadRune() 从字符串中读取下一个 byte 或者 rune。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>golang小笔记</title>
    <link href="/2023/07/10/golang%E5%B0%8F%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/07/10/golang%E5%B0%8F%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="字符串打印时，-v-和-v-的区别"><a href="#字符串打印时，-v-和-v-的区别" class="headerlink" title="字符串打印时，%v 和 %+v 的区别"></a>字符串打印时，%v 和 %+v 的区别</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">`%v`和`%+v`都可以用来打印`struct`的值，区别在于`%v`仅打印各个字段的值，`%+v`还会打印各个字段的名称。<br></code></pre></td></tr></table></figure><h3 id="空-struct-的用途"><a href="#空-struct-的用途" class="headerlink" title="空 struct{} 的用途"></a>空 struct{} 的用途</h3><p>使用空结构体 struct{}可以节省内存，一般作为占位符使用，表明这里并不需要一个值。</p><p>比如使用 map 表示集合时，只关注 key 的话，value 可以使用 struct{} 作为占位符。如果使用其他类型作为占位符，例如 int，bool，不仅浪费了内存，而且容易引起歧义。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Set <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">struct</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p>使用信道(channel)控制并发时，我们只是需要一个信号，但并不需要传递值，这个时候，也可以使用 struct{} 代替。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;, <span class="hljs-number">1</span>)<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>&lt;-ch<br><span class="hljs-comment">// do something</span><br>&#125;()<br>ch &lt;- <span class="hljs-keyword">struct</span>&#123;&#125;&#123;&#125;<br><span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>再比如，声明只包含方法的结构体。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Lamp <span class="hljs-keyword">struct</span>&#123;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l Lamp)</span></span> On() &#123;<br>        <span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;On&quot;</span>)<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(l Lamp)</span></span> Off() &#123;<br>        <span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Off&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="与"><a href="#与" class="headerlink" title="/ 与 %"></a><code>/</code> 与 <code>%</code></h3><p>A&#x3D;10 B&#x3D;20</p><table><thead><tr><th align="center">运算符</th><th align="center">描述</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center">&#x2F;</td><td align="center">相处</td><td align="center">B &#x2F; A &#x3D; 2</td></tr><tr><td align="center">%</td><td align="center">求余</td><td align="center">B % A &#x3D; 0</td></tr></tbody></table><h3 id="golang"><a href="#golang" class="headerlink" title="golang"></a>golang</h3>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go学习资料</title>
    <link href="/2023/07/10/Go%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/"/>
    <url>/2023/07/10/Go%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99/</url>
    
    <content type="html"><![CDATA[<h3 id="Go-入门"><a href="#Go-入门" class="headerlink" title="Go 入门"></a>Go 入门</h3><p><a href="https://google.github.io/styleguide/go/">Go Style Guides</a></p><p><a href="https://golang-china.github.io/gopl-zh/">The Go Programming Language</a></p><p><a href="https://chai2010.cn/advanced-go-programming-book/">Go 语言高级编程</a></p><p><a href="https://github.com/unknwon/the-way-to-go_ZH_CN/blob/master/eBook/directory.md">the-way-to-go</a></p><p><a href="https://awesome-programming-books.github.io/golang/go%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80.pdf">go 语言程序设计</a></p><p><a href="https://www.practical-go-lessons.com/">Practical Go Lessons(实用 GO 课程)</a></p><p><a href="https://www.kancloud.cn/kancloud/the-way-to-go/72432">Go 入门指南</a></p><p><a href="https://tour.go-zh.org/list">Go 指南</a></p><p><a href="https://books.studygolang.com/The-Golang-Standard-Library-by-Example/">Go 语言标准库</a></p><p><a href="https://learnku.com/go/wikis">Go 实用编码技巧</a></p><p><a href="https://cloud.tencent.com/developer/doc/1101">Go 教程</a></p><h3 id="Go-进阶"><a href="#Go-进阶" class="headerlink" title="Go 进阶"></a>Go 进阶</h3><p><a href="https://draveness.me/golang/">Go 语言设计与实现</a></p><p><a href="https://books.studygolang.com/advanced-go-programming-book/">Go 语言高级编程</a></p><p><a href="https://gofuncchan.gitee.io/books/">Go Book</a></p><p><a href="https://github.com/ssbandjl/golang-design-pattern">设计模式-Go 语言</a></p><p><a href="https://github.com/smallnest/go_test_workshop/blob/master/Go%20Test%20%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E8%BA%BA%E5%B9%B3.pdf">Go Test 从入门到躺平</a></p><p><a href="https://gocn.vip/c/3lQ6GbD5ny/s/Y2vWUE">Go Web 编程</a></p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">Git 教程</a></p><p><a href="https://docs.github.com/zh/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/quickstart-for-writing-on-github">GitHub 仓库中 README.md 的编写</a></p><h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><p><a href="https://www.yiibai.com/mysql">Mysql 教程</a></p><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><p><a href="https://www.w3cschool.cn/redis/">Redis 教程</a></p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">正则表达式教程</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">正则表达式练习网站</a></p><p><a href="https://tool.oschina.net/uploads/apidocs/jquery/regexp.html">正则表达式手册</a></p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p><a href="https://github.com/greyireland/algorithm-pattern">算法模板，最科学的刷题方式，最快速的刷题路径</a></p><p><a href="https://labuladong.github.io/algo/">LABULADONG 的算法网站</a></p><p><a href="https://hunterhug.github.io/goa.c/#/">数据结构与算法 Golang 实现</a></p><p><a href="https://github.com/halfrost/LeetCode-Go">LeetCode-Go</a></p><p><a href="https://github.com/peterrk/DSGO">数据结构之 Go 语言描述</a></p><p><a href="https://github.com/emirpasic/gods">Go Data Structures</a></p><p><a href="https://github.com/hunterhug/goa.c">数据结构和算法(Golang 实现)</a></p><p><a href="https://greyireland.gitbook.io/algorithm-pattern/">algorithm-pattern 的算法小抄</a></p><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p><a href="https://yeasy.gitbook.io/docker_practice/">Docker 从入门到实践</a></p><h3 id="Kubernetes-k8s"><a href="#Kubernetes-k8s" class="headerlink" title="Kubernetes(k8s)"></a>Kubernetes(k8s)</h3><p><a href="https://kubernetes.io/zh-cn/docs/tutorials/kubernetes-basics/">Kubernetes 基础</a></p><p><a href="https://www.k8stech.net/">k8s 技术栈</a></p><h3 id="后端开发"><a href="#后端开发" class="headerlink" title="后端开发"></a>后端开发</h3><p><a href="https://gitbook.curiouser.top/">大厂后端开发必会技术</a></p><p><a href="https://icyfenix.cn/">构建分布式系统</a></p><p><a href="https://cn.dubbo.apache.org/zh-cn/overview/home/">阿里-Dubbo 分布式 RPC 框架</a></p><p><a href="https://github.com/zeromicro/go-zero/blob/master/readme-cn.md">go-zero</a></p><h3 id="Go-开发者路线图"><a href="#Go-开发者路线图" class="headerlink" title="Go 开发者路线图"></a>Go 开发者路线图</h3><p><a href="https://github.com/Alikhll/golang-developer-roadmap/blob/master/i18n/zh-CN/ReadMe-zh-CN.md">2021Go 开发者成长路线图</a></p><p><a href="https://www.golangroadmap.com/">Gopher 学习 GOLANG ROADMAP</a></p><h3 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h3><p><a href="https://github.com/inoutcode/bitcoin_book_2nd">区块链入门知识</a></p><h3 id="资料推荐"><a href="#资料推荐" class="headerlink" title="资料推荐"></a>资料推荐</h3><p><a href="https://github.com/avelino/awesome-go#web-frameworks">Go 框架、库和软件的精选列表</a></p><p><a href="https://github.com/practical-tutorials/project-based-learning#go">Project Based Learning</a></p><p><a href="https://cyc2018.xyz/">CS-Notes 面试笔记</a></p><p><a href="https://github.com/codecrafters-io/build-your-own-x">Build your own X</a></p><p><a href="https://github.com/talkgo/read">Go 资料推荐</a></p><p><a href="https://github.com/shockerli/go-awesome">Go 语言优秀资源整理</a></p><p><a href="https://learnku.com/articles/58970">Go 练手项目</a></p><p><a href="https://www.yuque.com/xinliangnote/go-gin-api/ngc3x5">go-gin-api</a></p><p><a href="https://github.com/yangwenmai/learning-golang">learning-golang</a></p><p><a href="https://github.com/RongleXie/java-books-collections">软件开发电子书推荐 1</a></p><p><a href="https://github.com/EbookFoundation/free-programming-books/blob/main/books/free-programming-books-zh.md">软件开发电子书推荐 2</a></p><p><a href="https://github.com/Tyson0314/java-books">200 本计算机经典书籍</a></p><p><a href="https://github.com/realpython/python-guide">python 指南</a></p><p><a href="https://www.runoob.com/python/python-tutorial.html">python 基础教程</a></p><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><p><a href="https://eddycjy.gitbook.io/golang/">跟煎鱼学 Go</a></p><p><a href="https://www.liwenzhou.com/">李文周的博客</a></p><p><a href="http://www.lsdcloud.com/go/introduction.html">技术分享</a></p><p><a href="https://www.cnblogs.com/hmtk123/p/16179925.html">Golang 学习笔记</a></p><p><a href="https://hao.studygolang.com/">Gopher 网址导航</a></p><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p><a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases">Shadowsocks</a></p><p><a href="https://www.printlove.cn/tools/sql2gorm">在线 sql 转 gorm</a></p><p><a href="http://www.esjson.com/jsonviewer.html">在线格式化 json</a></p><p><a href="https://www.zmhttp.com/">芝麻代理 ip-爬虫</a></p><p><a href="https://www.91ajs.com/">爱加速代理 ip-爬虫</a></p>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go入门笔记</title>
    <link href="/2023/07/10/go%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/07/10/go%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis学习与使用</title>
    <link href="/2023/07/10/redis%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/07/10/redis%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="清空-redis-数据命令"><a href="#清空-redis-数据命令" class="headerlink" title="清空 redis 数据命令"></a>清空 redis 数据命令</h3><p>所有数据库的所有 key</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">flushall<br></code></pre></td></tr></table></figure><p>查看数据库 key 的数量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">DBSIZE<br></code></pre></td></tr></table></figure><p>切换到 1 号数据库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">SELECT 1<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Go进阶之路</title>
    <link href="/2023/07/10/Go%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/"/>
    <url>/2023/07/10/Go%E8%BF%9B%E9%98%B6%E4%B9%8B%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="Go-进阶之路"><a href="#Go-进阶之路" class="headerlink" title="Go 进阶之路"></a>Go 进阶之路</h2><p><a href="https://zhuanlan.zhihu.com/p/421041738">大厂对 Golang 的要求，请问你所在公司对 Golang 的要求有哪些？</a><br><a href="https://zhuanlan.zhihu.com/p/584071700">开发时长一年半 golang 工程师应该具备什么样的技术能力？</a></p>]]></content>
    
    
    <categories>
      
      <category>Golang</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>apt-get工具使用</title>
    <link href="/2023/07/10/apt-get%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/07/10/apt-get%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>更新软件源信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">apt-get update<br></code></pre></td></tr></table></figure><p>安装、卸载、更新软件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs SH"><span class="hljs-comment"># 安装一个软件包</span><br>apt-get install package<br><span class="hljs-comment"># 安装多个软件包之间用空格隔开</span><br>apt-get install package1 package2<br><span class="hljs-comment"># install -y</span><br>安装过程中需要输入时自动使用`<span class="hljs-built_in">yes</span>`<br><span class="hljs-comment"># install -d</span><br>全部包下载完后再执行一次命令后安装（不含`-d`）<br><br><span class="hljs-comment"># 卸载软件包（仅删除软件包本身）</span><br>apt-get remove package<br><span class="hljs-comment"># 卸载软件包以及相应的配置文件</span><br>apt-get purge package<br><span class="hljs-comment"># 自动删除多余、冲突的包</span><br>apt-get autoremove<br><br><span class="hljs-comment"># 更新所有软件包</span><br>apt-get upgrade package<br><span class="hljs-comment"># 解决更新过程中出现的依赖的问题</span><br>apt-get dist-upgrade package<br></code></pre></td></tr></table></figure><p>安装多个软件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SH"><span class="hljs-comment"># 多个软件之间用空格隔开</span><br>apt-get install package1 package2<br></code></pre></td></tr></table></figure><p>更换国内软件源</p><p>1.vim &#x2F;etc&#x2F;apt&#x2F;sources.list 2.将文件中的内容替换为如下阿里云的：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><p>3.重新更新软件源：<code>apt-get update</code></p><p>查看已安装包的信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 显示已安装的软件包</span><br>dpkg -l<br><span class="hljs-comment"># 显示某个具体的软件包的信息</span><br>dpkg -l | grep package<br>ubuntu<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>apt-get</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github多账户配置</title>
    <link href="/2023/07/10/github%E5%A4%9A%E8%B4%A6%E6%88%B7%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/07/10/github%E5%A4%9A%E8%B4%A6%E6%88%B7%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h3><p>不知是否有人像我一样，搞了两个 GitHub 账号，一个用来正常的和别人合作项目，另一个用来自己写一些代码，希望能做到两个本地账户和远程账号都完全隔离，没有联系，也不会被混淆使用。</p><p>但是这样就会有一个问题，设置本地用户 <code>user.email</code> 时候，如果你两个 GitHub 账号仓库使用同一个本地用户，GitHub 会将本地的用户自动与相应的 GitHub 账号关联起来，这样在 commit 记录里面就能看到是谁提交的了，这是我不想看到的结果。</p><p>当初的我以为只要把同一个 SSH 公钥分别添加到两个 GitHub 账户，再在不同的仓库设置不同的 <code>user.name</code> 和 &#96;user email&#96;&#96; 就 OK 了.后来发现我太天真了，并不行，每个公钥只能用一次。然后我就考虑生成两个密钥，分别添加到不同的账户，但是电脑在连接远程仓库时，只能默认选择其中固定的一个来连接，并不会根据我不同仓库的设置选择不同的密钥，结果就是还是只能免密连接一个 GitHub 账户的仓库。</p><p><strong>你所使用的 SSH 密钥决定了你是否有权限访问某一个 GitHub 账号下面的仓库，而你本地仓库设置的 use email 决定了在 GitHub 的 commit 记录中的用户，而一般在没有进行以下配置的情况下，你的电脑只会默认使用一个 SHH 密钥进行连接，这就导致了你只能访问一个 GitHub 账号。</strong></p><p>然后就到处找教程，但是不知道是否是因为时间太久远了，都是错误的，而且错误都是一样的，最后终于七拼八凑整成功了。</p><p>下面将详细介绍方法。</p><h3 id="1-生成密钥"><a href="#1-生成密钥" class="headerlink" title="1. 生成密钥"></a>1. 生成密钥</h3><p>首先是先生成两个 SSH 密钥，对应你的两个身份(假设为 public 和 private)。</p><p>假设你当初已经用 <code>ssh-keygen -t rsa -C “youremail@gmail.com”</code> 生成了一对秘钥 <code>id_rsa</code> 和 <code>id_rsa.pub</code>， 保存在了 <code>~/.ssh</code> 文件夹内。</p><p>然后，你需要再用另一个邮箱生成一对 private 的秘钥 <code>ssh-keygen -t rsa -C “private_email@gmail.com”</code>。这时候要注意重命名，否则会覆盖上面的密钥文件。假设我们生成了一对新的秘钥 <code>private</code> 和 <code>private.pub</code>。</p><p>然后分别将这两对密钥加入到对应的 GitHub 账户中，这个步骤就略过了。</p><ol start="2"><li>编辑配置文件<br>编辑~&#x2F;.ssh&#x2F;config 文件。如果该文件不存在的话，直接创建一个就好。里面的内容如下：</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 公共</span><br>Host github_public<br>Hostname ssh.github.com<br>IdentityFile ~<span class="hljs-regexp">/.ssh/i</span>d_rsa<br>port <span class="hljs-number">22</span><br><br><span class="hljs-comment">#个人</span><br>Host github_private<br>Hostname ssh.github.com<br>IdentityFile ~<span class="hljs-regexp">/.ssh/</span>private<br>port <span class="hljs-number">22</span><br></code></pre></td></tr></table></figure><blockquote><p>网上大部分教程的配置文件中 Hostname 都是 github.com，配置成那样是不能正常 SSH 访问的。我也不知道大家为什么都那样写，难道之前的就是这样？</p></blockquote><p>修改完之后，在 git bash 运行以下命令（@后面的主机名为上面配置文件中填写的 Host 选项），检查是否正常。</p><p>（先注意一下：这里一定是先把两个公钥添加到对应的 GitHub 账户，再进行下面的 ssh 连接测试，否则肯定是连接不上，会显示 permission denied。）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">ssh -T git@github_public<br>ssh -T git@github_private<br></code></pre></td></tr></table></figure><p>如果都能正常返回如下信息，就说明配置正常。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">Hi xxx! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></code></pre></td></tr></table></figure><p>同样的方式你就可以配置更多的以 SSH 登录的不同 git 用户。</p><h3 id="1-配置仓库设置"><a href="#1-配置仓库设置" class="headerlink" title="1. 配置仓库设置"></a>1. 配置仓库设置</h3><p>首先要删除 GIT 配置的全局用户名和邮件地址，接着在每个项目仓库中按照需求设置不同的 <code>user.name</code> 和 <code>user.email</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs git"># 删除全局设置<br>git config --global --unset user.name<br>git config --global --unset user.email<br><br># 添加本地设置<br># 设置为私有仓库的GitHub账号邮箱和公有账号的GitHub邮箱。<br>git config --local user.name xxxx<br>git config --local user.email xxx<br></code></pre></td></tr></table></figure><p>之后在添加远程仓库的时候，把 <code>github.com</code> 修改成 <code>github_public</code> 或者 <code>github_private</code> 就好了（即上述文件中的 HOST 选项），用上面两个 Host 名称来代替原来的 <code>github.com</code>，（这一步很重要）如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">git remote add origin git@github_public:xxx/example.git # public user<br>git remote add origin git@github_private:xxx/example.git # priavate user<br></code></pre></td></tr></table></figure><p>其实，上面的配置文件的意思就是，按照你设置远程仓库时使用不同的 Host 名称，查找 <code>~/.ssh/config</code> 文件，使用不同的 SSH 文件连接到 GitHub。这样你就将是以不同的身份访问 GitHub 仓库。</p><p><a href="https://zhuanlan.zhihu.com/p/62071906">参考文章</a></p>]]></content>
    
    
    <categories>
      
      <category>Github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac开发环境常用工具</title>
    <link href="/2023/07/10/mac%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    <url>/2023/07/10/mac%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h3 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a>iTerm2</h3><p>下载安装<a href="https://juejin.cn/post/6844904144277340168">iTerm2</a></p><h3 id="FinalShell-SSH-工具"><a href="#FinalShell-SSH-工具" class="headerlink" title="FinalShell SSH 工具"></a>FinalShell SSH 工具</h3><p>下载安装<a href="https://www.hostbuf.com/t/988.html">Hostbuf</a></p>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MacOS</tag>
      
      <tag>开发工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iterm2命令</title>
    <link href="/2023/07/10/iterm2%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/07/10/iterm2%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p><strong><a href="https://juejin.cn/post/6844904144277340168">mac 配置 iterm2</a></strong><br><a href="https://zhuanlan.zhihu.com/p/435518571">参考文章</a></p><h3 id="解决～前后的问号问题"><a href="#解决～前后的问号问题" class="headerlink" title="解决～前后的问号问题"></a>解决～前后的问号问题</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">git <span class="hljs-built_in">clone</span> git@github.com:powerline/fonts.git<br><span class="hljs-built_in">cd</span> ./fonts<br>./install.sh<br>然后在iTerm2中更换字体为 Meslo LG M Regular <span class="hljs-keyword">for</span> Powerline<br>重启iTerm2<br></code></pre></td></tr></table></figure><h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">command</span> + enter 进入与返回全屏模式<br><span class="hljs-built_in">command</span> + t 新建标签<br><span class="hljs-built_in">command</span> + w 关闭标签<br><span class="hljs-built_in">command</span> + 数字 <span class="hljs-built_in">command</span> + 左右方向键    切换标签<br><span class="hljs-built_in">command</span> + enter 切换全屏<br><span class="hljs-built_in">command</span> + f 查找<br><span class="hljs-built_in">command</span> + d 水平分屏<br><span class="hljs-built_in">command</span> + <span class="hljs-built_in">shift</span> + d 垂直分屏<br><span class="hljs-built_in">command</span> + option + 方向键 <span class="hljs-built_in">command</span> + [ 或 <span class="hljs-built_in">command</span> + ]    切换屏幕<br><span class="hljs-built_in">command</span> + ; 查看历史命令<br><span class="hljs-built_in">command</span> + <span class="hljs-built_in">shift</span> + h 查看剪贴板历史<br>ctrl + u    清除当前行<br>ctrl + l    清屏<br>ctrl + a    到行首<br>ctrl + e    到行尾<br>ctrl + f/b  前进后退<br>ctrl + p    上一条命令<br>ctrl + r    搜索命令历史<br></code></pre></td></tr></table></figure><p><a href="https://cnbin.github.io/blog/2015/06/20/iterm2-kuai-jie-jian-da-quan/">参考</a></p>]]></content>
    
    
    <categories>
      
      <category>命令语句</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MacOS</tag>
      
      <tag>iterm2</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>brew使用命令</title>
    <link href="/2023/07/10/brew%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/07/10/brew%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<ul><li>查看 brew 的帮助</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew –<span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><ul><li>安装软件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew install git<br></code></pre></td></tr></table></figure><ul><li>卸载软件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew uninstall git<br></code></pre></td></tr></table></figure><ul><li>搜索软件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew search git<br></code></pre></td></tr></table></figure><ul><li>显示已经安装软件列表</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew list<br></code></pre></td></tr></table></figure><ul><li>更新软件，把所有的 Formula 目录更新，并且会对本机已经安装并有更新的软件用*标明</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew update<br></code></pre></td></tr></table></figure><ul><li>更新某具体软件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew upgrade git<br></code></pre></td></tr></table></figure><ul><li>显示软件内容信息</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew info git<br></code></pre></td></tr></table></figure><ul><li>用浏览器打开</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew home<br></code></pre></td></tr></table></figure><ul><li>显示包依赖</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew deps<br></code></pre></td></tr></table></figure><ul><li>显示包的依赖树</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew deps --installed --tree<br></code></pre></td></tr></table></figure><ul><li>启动 web 服务器，可以通过浏览器访问 <a href="http://localhost:4567/">http://localhost:4567/</a> 来同网页来管理包</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew server<br></code></pre></td></tr></table></figure><ul><li>删除程序，和 upgrade 一样，单个软件删除和所有程序老版删除</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew cleanup git<br>brew cleanup<br></code></pre></td></tr></table></figure><ul><li>查看那些已安装的程序需要更新</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">brew outdated<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>命令语句</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>tmux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql、gorm笔记</title>
    <link href="/2023/07/04/mysql%E3%80%81gorm%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/07/04/mysql%E3%80%81gorm%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="mysql-基本操作"><a href="#mysql-基本操作" class="headerlink" title="mysql 基本操作"></a>mysql 基本操作</h3><h4 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table user (<br>id int not null auto_increment comment &#x27;主键&#x27;,<br>name varchar(10) not null default &#x27;&#x27; comment &#x27;姓名&#x27;,<br>password varchar(50) not null default &#x27;123&#x27; comment &#x27;密码，默认值为123&#x27;,<br>gender char(3) default &#x27;0&#x27; check (gender in(&#x27;0&#x27;,&#x27;1&#x27;,&#x27;2&#x27;)) comment &#x27;性别，0:未知 1:男 2:女&#x27;,<br>phone varchar(11) default &#x27;&#x27; comment &#x27;11位手机号码&#x27;,<br>email varchar(128) default &#x27;&#x27; comment &#x27;邮箱&#x27;,<br>identity varchar(128) default &#x27;&#x27; comment &#x27;身份证号&#x27;,<br>client_ip varchar(128) default &#x27;&#x27; comment &#x27;连接ip地址&#x27;,<br>client_post varchar(128) default &#x27;&#x27; comment &#x27;连接端口号&#x27;,<br>login_time datetime(3) default now(3) comment &#x27;登陆时间&#x27;,<br>logout_time datetime(3) default now(3) comment &#x27;下线时间&#x27;,<br>is_login tinyint(1) default 0 comment &#x27;在线状态，0:离线 1:在线&#x27;,<br>heartbeat_time varchar(128) default &#x27;&#x27; comment &#x27;心跳速率&#x27;,<br>device_info varchar(128) default &#x27;&#x27; comment &#x27;设备信息&#x27;,<br>created_at datetime(3) default null comment &#x27;创建时间&#x27;,<br>updated_at datetime(3) default null comment &#x27;更新时间&#x27;,<br>deleted_at datetime(3) default null comment &#x27;删除时间&#x27;,<br>primary key (id)<br>)engine=InnoDB default charset=utf8;<br></code></pre></td></tr></table></figure><h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop table table_name;<br></code></pre></td></tr></table></figure><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">drop database db_name;<br></code></pre></td></tr></table></figure><h4 id="mysqldump"><a href="#mysqldump" class="headerlink" title="mysqldump"></a>mysqldump</h4><h3 id="修改表信息"><a href="#修改表信息" class="headerlink" title="修改表信息"></a>修改表信息</h3><h4 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table table_oldname rename to table_newname;<br>eg: alter table user rename to user_info;<br></code></pre></td></tr></table></figure><h4 id="修改字段名"><a href="#修改字段名" class="headerlink" title="修改字段名"></a>修改字段名</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table table_name change field_oldname field_newname type;<br>eg: alter table user change is_login is_logout tinyint(1);<br></code></pre></td></tr></table></figure><h4 id="修改字段属性"><a href="#修改字段属性" class="headerlink" title="修改字段属性"></a>修改字段属性</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table table_name modify column fieldname type not null default &#x27;&#x27; comment &#x27;字段信息&#x27;;<br>eg: alter table user modify column name varchar(128) not null default &#x27;&#x27; comment &#x27;姓名&#x27;;<br></code></pre></td></tr></table></figure><h4 id="显示表全部信息"><a href="#显示表全部信息" class="headerlink" title="显示表全部信息"></a>显示表全部信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show create table table_name;<br></code></pre></td></tr></table></figure><h4 id="设置性别约束"><a href="#设置性别约束" class="headerlink" title="设置性别约束"></a>设置性别约束</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table user(<br>...<br>gender char(3) default &#x27;0&#x27; check (gender in(&#x27;0&#x27;,&#x27;1&#x27;,&#x27;2&#x27;)) comment &#x27;性别，0:未知 1:男 2:女&#x27;,<br>...<br>);<br></code></pre></td></tr></table></figure><h3 id="gorm"><a href="#gorm" class="headerlink" title="gorm"></a>gorm</h3><h4 id="gorm-映射-mysql-数据表"><a href="#gorm-映射-mysql-数据表" class="headerlink" title="gorm 映射 mysql 数据表"></a>gorm 映射 mysql 数据表</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> TableName <span class="hljs-keyword">struct</span>&#123;<br>    ID            <span class="hljs-type">int</span>       <span class="hljs-string">`json:&quot;id&quot; gorm:&quot;column:id;primaryKey;autoIncrement;comment:自增主键id&quot;`</span><br>    Name          <span class="hljs-type">string</span>    <span class="hljs-string">`json:&quot;name&quot; gorm:&quot;column:name;comment:用户姓名&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>go 在使用结构体映射 mysql 数据表时：column 来对应 mysql 表中中的字段名，primaryKey 对应主键，&gt; autoIncrement 对应自增属性，comment 对应字段注释，index 对应索引。</p><p>还有 size、not null、default 等属性也可以一一对应</p><p>eg: <code>gorm:&quot;column:id;size:4;primaryKey;autoIncrement;not null;default:0;comment:自增主键id;index:index_name&quot;</code></p></blockquote><div class="note note-info">            <p>使用 gorm 时，进行修改增改操作时，尽量重新声明结构体来进行操作，和查询使用结构体分离开来。</p>          </div><h4 id="FirstOrCreate-与-Assign"><a href="#FirstOrCreate-与-Assign" class="headerlink" title="FirstOrCreate 与 Assign"></a>FirstOrCreate 与 Assign</h4><p>空表插入数据、非空表更新数据</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// 未找到 user，根据条件和 Assign 属性创建记录</span><br>db.Where(User&#123;Name: <span class="hljs-string">&quot;non_existing&quot;</span>&#125;).Assign(User&#123;Age: <span class="hljs-number">20</span>&#125;).FirstOrCreate(&amp;user)<br><span class="hljs-comment">// SELECT * FROM users WHERE name = &#x27;non_existing&#x27; ORDER BY id LIMIT 1;</span><br><span class="hljs-comment">// INSERT INTO &quot;users&quot; (name, age) VALUES (&quot;non_existing&quot;, 20);</span><br><span class="hljs-comment">// user -&gt; User&#123;ID: 112, Name: &quot;non_existing&quot;, Age: 20&#125;</span><br><br><span class="hljs-comment">// 找到了 `name` = `jinzhu` 的 user，依然会根据 Assign 更新记录</span><br>db.Where(User&#123;Name: <span class="hljs-string">&quot;jinzhu&quot;</span>&#125;).Assign(User&#123;Age: <span class="hljs-number">20</span>&#125;).FirstOrCreate(&amp;user)<br><span class="hljs-comment">// SELECT * FROM users WHERE name = &#x27;jinzhu&#x27; ORDER BY id LIMIT 1;</span><br><span class="hljs-comment">// UPDATE users SET age=20 WHERE id = 111;</span><br><span class="hljs-comment">// user -&gt; User&#123;ID: 111, Name: &quot;jinzhu&quot;, Age: 20&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>数据库</tag>
      
      <tag>mysql</tag>
      
      <tag>gorm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git常用命令</title>
    <link href="/2023/07/04/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/07/04/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="git-tag"><a href="#git-tag" class="headerlink" title="git tag"></a>git tag</h3><p><strong>轻量标签</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git tag v1.0.0<br></code></pre></td></tr></table></figure><p><strong>附注标签（为附注标签指定一条信息）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs git">git tag -a v1.0.0 -m &#x27;version 1.0.0&#x27;<br></code></pre></td></tr></table></figure><p><strong>后期打标签</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs git">获取历史提交记录：<br>git log --pretty=oneline<br>补上标签：<br>git tag -a v1.0.0 9fceb02(校验和)<br></code></pre></td></tr></table></figure><p><strong>列出标签</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">git tag<br>git tag -l<br>git tag --list<br></code></pre></td></tr></table></figure><p><strong>推送标签到 github</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs git">git push origin tagname--推送单个标签<br>git push origin --tags--推送多个标签<br></code></pre></td></tr></table></figure><p><strong>删除标签</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs git">git tag -d v1.0.0    --删除本地标签<br>git push origin --delete v1.0.0    --删除远程标签<br>git push &lt;remote&gt; :refs/tags/&lt;tagname&gt;    --删除远程标签<br></code></pre></td></tr></table></figure><p><strong>检出标签</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">git</span> checkout v1.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h3 id="忽略某些不想提交的文件"><a href="#忽略某些不想提交的文件" class="headerlink" title="忽略某些不想提交的文件"></a>忽略某些不想提交的文件</h3><p><strong>在项目目录下创建.gitignore 文件</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">vim .gitignore<br></code></pre></td></tr></table></figure><p><strong>添加忽略的文件名或后缀</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">.idea<br>.gitignore<br>*.iml<br></code></pre></td></tr></table></figure><p><strong>忽略文件已上传解决办法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs git"># 删除缓存<br>git rm -r --cache .<br><br># 查看状态<br>git status<br><br># 将更改提交到本地暂存区<br>git add .<br><br># 提交本地库<br>git commit -m &#x27;忽略 .idea .gitignore *.iml&#x27;<br><br># 上传服务器<br>git push origin main<br></code></pre></td></tr></table></figure><h3 id="撤销-commit"><a href="#撤销-commit" class="headerlink" title="撤销 commit"></a>撤销 commit</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs git"># 撤销commit<br>git reset --soft HEAD^<br><br># 修改commit注释<br>git commit --amend<br></code></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs git"># --mixed<br>不删除工作空间改动代码，撤销commit，并且撤销git add . 操作<br>这个为默认参数,git reset --mixed HEAD^ 和 git reset HEAD^ 效果是一样的<br><br># --soft<br>不删除工作空间改动代码，撤销commit，不撤销git add .<br><br># --hard<br>删除工作空间改动代码，撤销commit，撤销git add .<br>注意完成这个操作后，就恢复到了上一次的commit状态<br><br># HEAD^<br>HEAD^的意思是上一个版本，也可以写成HEAD~1<br>如果进行了2次commit，想都撤回，可以使用HEAD~2<br></code></pre></td></tr></table></figure><h3 id="恢复到指定版本"><a href="#恢复到指定版本" class="headerlink" title="恢复到指定版本"></a>恢复到指定版本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs git"># 查看提交日志<br>git log<br><br># 恢复到指定版本<br>git reset --hard 版本号<br></code></pre></td></tr></table></figure><p>撤销远程仓库的 commit</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs git"># 查看历史commit版本号<br>git log<br><br># 恢复到想要恢复的版本号<br>git reset --hard 版本号<br><br># 提交到远程仓库<br>git push origin branch_name --force<br></code></pre></td></tr></table></figure><h3 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs git"># 本地创建分支 推送到远程仓库<br>git push --set-upstream origin branch_name<br><br># 远程创建分支 连接到本地分支<br>git fetch<br>git checkout -b branch_name origin/branch_name<br><br># 查看本地分支与远程分支连接情况<br>git branch -vv<br><br># 删除分支<br>git branch -b branch_name<br><br># 查看远程分支<br>git branch -r<br><br># 查看所有分支（远程+本地）<br>git branch -a<br></code></pre></td></tr></table></figure><h3 id="本地仓库连接远程仓库"><a href="#本地仓库连接远程仓库" class="headerlink" title="本地仓库连接远程仓库"></a>本地仓库连接远程仓库</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs git">给目标文件夹连接到目标仓库<br>git remote add origin + ssh/https<br><br># 查看连接情况<br>git remote -v 查看连接情况<br><br># 移除已存在的远程仓库连接<br>git remote rm origin<br></code></pre></td></tr></table></figure><h3 id="git-设置-config"><a href="#git-设置-config" class="headerlink" title="git 设置 config"></a>git 设置 config</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs git"># 查看local config<br>git config --local -l<br><br># 查看global config<br>git config --global -l<br><br># 设置local config<br>git config --local user.name &quot;&quot;<br>git config --local user.email &quot;&quot;<br><br># 设置global config<br>git config --global user.name &quot;&quot;<br>git config --loglobalcal user.email &quot;&quot;<br>设置global config后会生成~/.gitconfig文件<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>命令语句</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go读写csv文件</title>
    <link href="/2023/07/04/go%E8%AF%BB%E5%86%99csv%E6%96%87%E4%BB%B6/"/>
    <url>/2023/07/04/go%E8%AF%BB%E5%86%99csv%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="使用依赖库"><a href="#使用依赖库" class="headerlink" title="使用依赖库"></a>使用依赖库</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span>(<br>  <span class="hljs-string">&quot;encoding/csv&quot;</span><br>)<br></code></pre></td></tr></table></figure><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p><strong>打开一个 csv 文件并声明一个 csv.Reader 对象</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">file, err := os.Open(<span class="hljs-string">&quot;foo.csv&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br><span class="hljs-keyword">defer</span> file.Close()<br>reader := csv.NewReader(file)<br></code></pre></td></tr></table></figure><p><strong>使用 <code>csv.Reader.Read</code> 来读取一行数据</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">row, err := reader.Read()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br>fmt.Println(row)<br></code></pre></td></tr></table></figure><p><strong>使用 <code>csv.Reader.ReadAll</code> 读取所有行</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">rows, err := reader.ReadAll()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> rows &#123;<br>fmt.Println(v)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h3><p><strong>创建一个 csv 文件并声明一个 <code>csv.NewWriter</code> 对象</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">file, err := os.Create(<span class="hljs-string">&quot;test.csv&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br><span class="hljs-keyword">defer</span> file.Close()<br>writer := csv.NewWriter(file)<br></code></pre></td></tr></table></figure><p><strong>控制 csv 文件中的字段分隔符</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">write.Comma = <span class="hljs-string">&#x27;,&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>使用 <code>csv.Writer.Write</code> 来写入一行数据</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">err = write.Write([]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;nihao&quot;</span>, <span class="hljs-string">&quot;ok~&quot;</span>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>调用 <code>csv.Writer.Flush</code> 才能完成将数据写入文件中</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">write.Flush()<br></code></pre></td></tr></table></figure><p><strong>使用 <code>csv.Writer.WriteAll</code> 来进行多行写入</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go">err = write.WriteAll([][]<span class="hljs-type">string</span>&#123;<br>&#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;line1&quot;</span>, <span class="hljs-string">&quot;ok~&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;line2&quot;</span>, <span class="hljs-string">&quot;ok~&quot;</span>&#125;,<br>&#123;<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;line3&quot;</span>, <span class="hljs-string">&quot;ok~&quot;</span>&#125;,<br>&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(err)<br>&#125;<br>write.Flush()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Go语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>Go</tag>
      
      <tag>文件读写</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux系统中常用的终端命令</title>
    <link href="/2023/07/04/Linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/07/04/Linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h3 id="删除：rm"><a href="#删除：rm" class="headerlink" title="删除：rm"></a>删除：rm</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">rm</span> -rf abc/def.log<br><span class="hljs-built_in">rm</span> -f abc/def.log<br>删除多个文件:<br><span class="hljs-built_in">rm</span> -rf abc/a.txt abc/b.txt<br></code></pre></td></tr></table></figure><ul><li>-i 删除前逐一询问确认。</li><li>-f 即使原档案属性设为唯读，亦直接删除，无需逐一确认。</li><li>-r 将目录及以下之档案亦逐一删除。</li></ul><h3 id="复制：cp"><a href="#复制：cp" class="headerlink" title="复制：cp"></a>复制：cp</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">将当前目录<span class="hljs-built_in">test</span>/下的所有文件复制到新目录newtest下:<br><span class="hljs-built_in">cp</span> -r <span class="hljs-built_in">test</span>/ newtest<br></code></pre></td></tr></table></figure><ul><li>-a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于 dpR 参数组合。</li><li>-d：复制时保留链接。这里所说的链接相当于 Windows 系统中的快捷方式。</li><li>-f：覆盖已经存在的目标文件而不给出提示。</li><li>-i：与 -f 选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答 y 时目标文件将被覆盖。</li><li>-p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。</li><li>-r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。</li><li>-l：不复制文件，只是生成链接文件。</li></ul><div class="note note-danger">            <p>用户使用该指令复制目录时，必须使用参数 -r 或者 -R 。</p>          </div><h3 id="重命名与移动：mv"><a href="#重命名与移动：mv" class="headerlink" title="重命名与移动：mv"></a>重命名与移动：mv</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">将原文件名改为新文件名:<br><span class="hljs-built_in">mv</span> old_name(文件) new_name(文件)<br>将file_name文件移动到directory目录中:<br><span class="hljs-built_in">mv</span> file_name(文件) directory(目录)<br>若new_directory目录不存在，将old_directory重命名为new_directory;若new_directory目录已存在，将old_directory移动到new_directory目录下:<br><span class="hljs-built_in">mv</span> old_directory(目录) new_directory(目录)<br></code></pre></td></tr></table></figure><ul><li>-b: 当目标文件或目录存在时，在执行覆盖前，会为其创建一个备份。</li><li>-i: 如果指定移动的源目录或文件与目标的目录或文件同名，则会先询问是否覆盖旧文件，输入 y 表示直接覆盖，输入 n 表示取消该操作。</li><li>-f: 如果指定移动的源目录或文件与目标的目录或文件同名，不会询问，直接覆盖旧文件。</li><li>-n: 不要覆盖任何已存在的文件或目录。</li><li>-u：当源文件比目标文件新或者目标文件不存在时，才执行移动操作。</li></ul><h3 id="服务器与本地计算机之间互相传送文件：scp"><a href="#服务器与本地计算机之间互相传送文件：scp" class="headerlink" title="服务器与本地计算机之间互相传送文件：scp"></a>服务器与本地计算机之间互相传送文件：scp</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">远程服务器-&gt;本地:<br>scp ubuntu@xx.xxx.xxx.xx:/home/ubuntu/a.log /home/space<br>本地-&gt;远程服务器:<br>scp /home/space/a.txt ubuntu@xx.xxx.xxx.xx:/home/ubuntu/space<br></code></pre></td></tr></table></figure><h3 id="新建文件、文件夹"><a href="#新建文件、文件夹" class="headerlink" title="新建文件、文件夹"></a>新建文件、文件夹</h3><p><strong>touch、mkdir</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">touch</span> file.txt    --新建.txt文件<br><span class="hljs-built_in">mkdir</span> file    --新建文件夹<br></code></pre></td></tr></table></figure><p><strong>重定向操作符创建文件</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">&gt; file.txt    --文件不存在则创建，存在则覆盖<br>&gt;&gt; file.txt    --文件不存在则创建，存在则添加到已存在的文件中<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>命令语句</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker学习、使用笔记</title>
    <link href="/2023/07/04/docker%E5%AD%A6%E4%B9%A0%E3%80%81%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/07/04/docker%E5%AD%A6%E4%B9%A0%E3%80%81%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>参考网站：</p><p><a href="https://zhuanlan.zhihu.com/p/576172727">docker 从入门到实战-万字长文全面介绍 docker 入门及高阶用法</a></p><p><a href="https://zhuanlan.zhihu.com/p/26418829">使用 docker 部署一个 Web 应用</a></p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux查看进程</title>
    <link href="/2023/07/04/Linux%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B/"/>
    <url>/2023/07/04/Linux%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="Linux-查看进程命令"><a href="#Linux-查看进程命令" class="headerlink" title="Linux 查看进程命令"></a>Linux 查看进程命令</h2><p>查看端口号占用情况</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">lsof -i :port<br></code></pre></td></tr></table></figure><p>杀死正在占用的端口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">kill</span> -9 port<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>命令语句</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tmux工具</title>
    <link href="/2023/07/04/Tmux%E5%B7%A5%E5%85%B7/"/>
    <url>/2023/07/04/Tmux%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="Tmux-工具的学习使用"><a href="#Tmux-工具的学习使用" class="headerlink" title="Tmux 工具的学习使用"></a>Tmux 工具的学习使用</h2><p>在服务器上测试 demo 的时候，需要后台挂起服务，方便查看项目运行情况，学习了一下 tmux。</p><p>参考网站：<a href="https://zhuanlan.zhihu.com/p/102546608">知乎</a>、<a href="https://www.ruanyifeng.com/blog/2019/10/tmux.html">阮一峰的博客</a></p>]]></content>
    
    
    <categories>
      
      <category>开发工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Tmux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法与数据数据结构C语言实现</title>
    <link href="/2023/07/04/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/"/>
    <url>/2023/07/04/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84C%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>algo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言基础学习笔记</title>
    <link href="/2023/07/04/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/07/04/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="从头捡起-C-语言"><a href="#从头捡起-C-语言" class="headerlink" title="从头捡起 C 语言"></a>从头捡起 C 语言</h2><p>开始刷算法，准备先过一遍数据结构与算法这门课程。发现大部分书籍都是用 C 语言实现的，而 Go 语言的书很少有，找到的一些电子书也不够完善，所以重学一遍 C 语言，先学一遍数据结构与算法，再来系统的刷题。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>全局变量保存在内存的全局存储区中，占用静态的存储单元</li><li>局部变量保存在栈中，只有在所在函数被调用时才动态地为变量分配存储单元</li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h3 id="static-关键字的使用"><a href="#static-关键字的使用" class="headerlink" title="static 关键字的使用"></a>static 关键字的使用</h3><ul><li>局部变量的修饰符<br>通常是在某个函数体内，只能在该函数内被调用。<br>这样定义的变量通常被称为局部静态变量，它的值不会因为函数调用的结束而被清除，当函数再次被调用时，它的值是上一次调用结束后的值。<br>局部静态变量存储在静态存储区。</li><li>全局变量的修饰符<br>在某一个文件中，不属于任何一个函数。<br>这样定义的变量通常被称为静态全局变量。</li><li>用于函数的修饰符<br>关键字 static 还可以用于修饰一个函数，这样的函数称之为静态函数。<br>定义一个静态函数就是在函数的返回类型前加上 static 关键字。<br>静态函数的作用域仅限于本文件，不能被其它文件调用。</li></ul><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p><strong>枚举是 c 语言的一种基本数据类型</strong></p><p>声明一个枚举类型：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> 枚举名&#123;</span>枚举元素<span class="hljs-number">1</span>,枚举元素<span class="hljs-number">2.</span>..&#125;;<br></code></pre></td></tr></table></figure><p>定义一个枚举变量：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//先声明枚举类型再定义枚举变量</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> 枚举名&#123;</span>枚举元素<span class="hljs-number">1</span>,枚举元素<span class="hljs-number">2.</span>..&#125;;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> 枚举名 枚举变量;</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">DAY</span> &#123;</span>MON=<span class="hljs-number">1</span>, TUE, WED, THU, FRI, SAT, SUN&#125;;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">DAY</span> <span class="hljs-title">day</span>;</span><br><span class="hljs-comment">//省略枚举名称，直接定义枚举变量</span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> &#123;</span>MON=<span class="hljs-number">1</span>, TUE, WED, THU, FRI, SAT, SUN&#125; day;<br></code></pre></td></tr></table></figure><div class="note note-info">            <p>C 语言中，不连续的枚举类型无法遍历。</p>          </div><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p><strong>指针也就是内存地址</strong>，指针变量是用来存放内存地址的变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//声明指针变量</span><br>type *p;<br><span class="hljs-comment">//指针变量赋值</span><br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> *p;<br>p = &amp;a;<br>p -&gt; 一个十六进制内存地址<br>*p -&gt; p存储的十六进制内存地址所对应的值<br></code></pre></td></tr></table></figure><h4 id="C-指针的算术运算"><a href="#C-指针的算术运算" class="headerlink" title="C 指针的算术运算"></a>C 指针的算术运算</h4><p><strong>++、–、+、-</strong></p><ul><li><p>指针的每一次递增，它其实会指向下一个元素的存储单元。</p></li><li><p>指针的每一次递减，它都会指向前一个元素的存储单元。</p></li><li><p>指针在递增和递减时跳跃的字节数取决于指针所指向变量数据类型长度，比如 int 就是 4 个字节。</p></li></ul><h4 id="递增一个指针"><a href="#递增一个指针" class="headerlink" title="递增一个指针"></a>递增一个指针</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> var[] = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>&#125;;<br><span class="hljs-type">int</span> *p;<br>p = var;<span class="hljs-comment">/* 指针中的数组地址 */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;var[%d]=%p\n&quot;</span>,i,p);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;var[%d]=%d\n&quot;</span>,i,*p);<br><br>p++;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="递减一个指针"><a href="#递减一个指针" class="headerlink" title="递减一个指针"></a>递减一个指针</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> var[] = &#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>&#125;;<br><span class="hljs-type">int</span> *p;<br>p = &amp;var[<span class="hljs-number">2</span>];<span class="hljs-comment">/* 指针中最后一个元素的地址 */</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;var[%d]=%p\n&quot;</span>,i,p);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;var[%d]=%d\n&quot;</span>,i,*p);<br><br>  p--;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="指针的比较"><a href="#指针的比较" class="headerlink" title="指针的比较"></a>指针的比较</h4><p>指针可以使用关系运算符进行比较，例如<code>==</code>、<code>&lt;</code>和<code>&gt;</code>。</p><h4 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//声明一个指针数组</span><br>type *ptr[] = &#123;...&#125;;<br></code></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><strong>字符串实际上是使用空字符 \0 结尾的一维字符数组。因此，\0 是用于标记字符串的结束。</strong></p><p><strong>空字符（Null character）</strong>又称结束符，缩写 <strong>NUL</strong>，是一个数值为 <strong>0</strong> 的控制字符，<strong>\0</strong> 是转义字符，意思是告诉编译器，这不是字符 <strong>0</strong>，而是空字符。</p><p>下面的声明和初始化创建了一个 <strong>RUNOOB</strong> 字符串。由于在数组的末尾存储了空字符 <strong>\0</strong>，所以字符数组的大小比单词 <strong>RUNOOB</strong> 的字符数多一个。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> site[<span class="hljs-number">7</span>] = &#123;<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br></code></pre></td></tr></table></figure><p>依据数组初始化规则，您可以把上面的语句写成以下语句：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> site[] = <span class="hljs-string">&quot;RUNOOB&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="操作字符串的函数"><a href="#操作字符串的函数" class="headerlink" title="操作字符串的函数"></a>操作字符串的函数</h4><div class="note note-info">            <p>strcpy(s1, s2);</p><p>复制字符串 s2 到字符串 s1</p>          </div><div class="note note-info">            <p>strcat(s1, s2);</p><p>连接字符串 s2 到字符串 s1 的末尾</p>          </div><div class="note note-info">            <p>strlen(s1);</p><p>返回字符串 s1 的长度</p>          </div><div class="note note-info">            <p>strcmp(s1,s2);</p><p>如果 s1 和 s2 是相同的，则返回 0；如果 s1&lt;s2 则返回小于 0；如果 s1&gt;s2 则返回大于 0。</p>          </div><div class="note note-info">            <p>strchr(s1,ch);</p><p>返回一个指针，指向字符串 s1 中字符 ch 的第一次出现的位置。(截取 ch 及后面的字符)</p>          </div><div class="note note-info">            <p>strstr(s1,s2);</p><p>返回一个指针，指向字符串 s1 中字符串 s2 的第一次出现的位置。</p>          </div><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p><strong>C 数组允许定义可存储相同类型数据项的变量，结构是 C 编程中另一种用户自定义的可用的数据类型，它允许您存储不同类型的数据项。</strong></p><h4 id="定义结构"><a href="#定义结构" class="headerlink" title="定义结构"></a>定义结构</h4><p>为了定义结构，您必须使用 <strong>struct</strong> 语句。<code>struct</code> 语句定义了一个包含多个成员的新的数据类型，<code>struct</code> 语句的格式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tag</span> &#123;</span><br>    member-<span class="hljs-built_in">list</span><br>    member-<span class="hljs-built_in">list</span><br>    member-<span class="hljs-built_in">list</span><br>    ...<br>&#125; variable-<span class="hljs-built_in">list</span> ;<br><span class="hljs-comment">//tag 是结构体标签。</span><br><span class="hljs-comment">//member-list 是标准的变量定义，比如 int i; 或者 float f，或者其他有效的变量定义。</span><br><span class="hljs-comment">//variable-list 结构变量，定义在结构的末尾，最后一个分号之前，您可以指定一个或多个结构变量。</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span>&#123;</span><br><span class="hljs-type">char</span> title[<span class="hljs-number">50</span>];<br><span class="hljs-type">char</span> author[<span class="hljs-number">50</span>];<br><span class="hljs-type">char</span> subject[<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> book_id;<br>&#125; book;<br></code></pre></td></tr></table></figure><h3 id="共用体"><a href="#共用体" class="headerlink" title="共用体"></a>共用体</h3><p><strong>共用体是一种特殊的数据类型，允许您在相同的内存位置存储不同的数据类型。您可以定义一个带有多成员的共用体，但是任何时候只能有一个成员带有值。共用体提供了一种使用相同的内存位置的有效方式。</strong></p><h4 id="定义共用体"><a href="#定义共用体" class="headerlink" title="定义共用体"></a>定义共用体</h4><p>为了定义共用体，您必须使用 <code>union</code> 语句，方式与定义结构类似。<code>union</code> 语句定义了一个新的数据类型，带有多个成员。<code>union</code> 语句的格式如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">union</span> [<span class="hljs-title">union</span> <span class="hljs-title">tag</span>]</span><br><span class="hljs-class">&#123;</span><br>   member definition;<br>   member definition;<br>   ...<br>   member definition;<br>&#125; [one or more <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">variables</span>];</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">Data</span>&#123;</span><br><span class="hljs-type">int</span> i;<br><span class="hljs-type">float</span> f;<br><span class="hljs-type">char</span> str[<span class="hljs-number">20</span>];<br>&#125; data;<br></code></pre></td></tr></table></figure><p>访问共用体成员，使用成员运算符(.)</p><div class="note note-warning">            <p>在同一时间，只能使用一个类型的成员变量，否则会造成数据损坏。</p>          </div><h3 id="typedef"><a href="#typedef" class="headerlink" title="typedef"></a>typedef</h3><p>C 语言提供了 <code>typedef</code> 关键字，您可以使用它来为类型取一个新的名字。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> BYTE;<br></code></pre></td></tr></table></figure><p>在这个类型定义之后，标识符 <code>BYTE</code> 可作为类型 <code>unsigned char</code> 的缩写，例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">BYTE b1,b2;<br></code></pre></td></tr></table></figure><p>（按照惯例，定义时会大写字母，以便提醒用户类型名称是一个象征性的缩写，但也可以使用小写字母。）</p><p>可以使用 <strong>typedef</strong> 来为用户自定义的数据类型取一个新的名字。例如，您可以对结构体使用 <code>typedef</code> 来定义一个新的数据类型名字，然后使用这个新的数据类型来直接定义结构变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Books</span>&#123;</span><span class="hljs-comment">//typedef给结构体Books定义新数据类型名称Book</span><br><span class="hljs-type">char</span> title[<span class="hljs-number">50</span>];<br><span class="hljs-type">char</span> author[<span class="hljs-number">50</span>];<br><span class="hljs-type">char</span> subject[<span class="hljs-number">50</span>];<br><span class="hljs-type">int</span> book_id;<br>&#125;Book;<br>Book book;<span class="hljs-comment">//使用新数据类型名称Book定义变量book</span><br></code></pre></td></tr></table></figure><h4 id="typedef-与-define"><a href="#typedef-与-define" class="headerlink" title="typedef 与 #define"></a>typedef 与 #define</h4><p><strong>#define</strong> 是 C 指令，用于为各种数据类型定义别名，与 <strong>typedef</strong> 类似，但是它们有以下几点不同：</p><ul><li><p><code>typedef</code> 仅限于为类型定义符号名称，<code>#define</code> 不仅可以为类型定义别名，也能为数值定义别名，比如您可以定义 1 为 ONE。</p></li><li><p><code>typedef</code> 是由编译器执行解释的，<code>#define</code> 语句是由预编译器进行处理的。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>C</tag>
      
      <tag>数据结构</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu搭建Jenkins环境自动发布Go项目</title>
    <link href="/2023/07/04/ubuntu%E6%90%AD%E5%BB%BAJenkins%E7%8E%AF%E5%A2%83%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83Go%E9%A1%B9%E7%9B%AE/"/>
    <url>/2023/07/04/ubuntu%E6%90%AD%E5%BB%BAJenkins%E7%8E%AF%E5%A2%83%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83Go%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="ubuntu-搭建-Jenkins-环境"><a href="#ubuntu-搭建-Jenkins-环境" class="headerlink" title="ubuntu 搭建 Jenkins 环境"></a>ubuntu 搭建 Jenkins 环境</h2><ul><li>安装 Java</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sudo apt update<br>$ sudo apt install openjdk-11-jdk<br>$ java -version<br>//自Jenkins 2.357 和 LTS 2.361.1 起，Jenkins 需要 Java 11 或 17<br></code></pre></td></tr></table></figure><div class="note note-success">            <p>文字 或者 <code>markdown</code> 均可</p>          </div>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>Linux</tag>
      
      <tag>运维</tag>
      
      <tag>Jenkins</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo使用Fluid主题</title>
    <link href="/2023/07/04/hexo%E4%BD%BF%E7%94%A8Fluid%E4%B8%BB%E9%A2%98/"/>
    <url>/2023/07/04/hexo%E4%BD%BF%E7%94%A8Fluid%E4%B8%BB%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><p>Fluid 是基于 Hexo 的一款 Material Design 风格的主题，由 Fluid-dev (opens new window)负责开发与维护。</p><p>主题 GitHub: <a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a><br>预览网站: Fluid’s blog (opens new window)zkqiang’s blog</p><h3 id="搭建-hexo-博客"><a href="#搭建-hexo-博客" class="headerlink" title="搭建 hexo 博客"></a>搭建 hexo 博客</h3><p>先安装 hexo，搭建 hexo 博客网站</p><h3 id="获取主题"><a href="#获取主题" class="headerlink" title="获取主题"></a>获取主题</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><h3 id="选择-hexo-主题"><a href="#选择-hexo-主题" class="headerlink" title="选择 hexo 主题"></a>选择 hexo 主题</h3><p>如下修改 Hexo 博客目录中的的_config.yml 文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">theme: fluid  <span class="hljs-comment">#指定主题</span><br></code></pre></td></tr></table></figure><h3 id="创建「关于页」"><a href="#创建「关于页」" class="headerlink" title="创建「关于页」"></a>创建「关于页」</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ hexo n page about<br></code></pre></td></tr></table></figure><p>然后修改&#x2F;source&#x2F;about&#x2F;index.md 文件，添加 layout 属性</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">---<br>title: 标题<br>layout: about<br>---<br><br><span class="hljs-comment"># 这里填写你想在about页展示的内容</span><br></code></pre></td></tr></table></figure><div class="note note-warning">            <p><code>layout: about</code> 必须存在，并且不能修改成其他值，否则不会显示头像等样式。</p>          </div><h3 id="about-页操作"><a href="#about-页操作" class="headerlink" title="about 页操作"></a>about 页操作</h3><p><strong>修改 about 页面下头像下的简介</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">在 _config.fluid.yaml 文件中<br>修改 about 下的 intro 字段<br></code></pre></td></tr></table></figure><p><strong>about 页面添加自我介绍</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">source/about/index.md文件中<br>在&quot;---&quot;下面空白处填写自我介绍<br></code></pre></td></tr></table></figure><p><strong>更改标签栏的图标</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">修改 _config.fluid.yml 文件中的 favicon 字段<br></code></pre></td></tr></table></figure><h2 id="hexo-fluid-个人使用笔记"><a href="#hexo-fluid-个人使用笔记" class="headerlink" title="hexo fluid 个人使用笔记"></a>hexo fluid 个人使用笔记</h2><p>在 Hexo+Fiuld 主题搭建的个人博客使用过程中，根据用户手册，记录一些个人使用笔记。</p><h3 id="修改页面图片"><a href="#修改页面图片" class="headerlink" title="修改页面图片"></a>修改页面图片</h3><p>在_config.fluid.yml 文件中，修改对应页面的 banner_img，图片需要保存在&#x2F;source&#x2F;img 文件夹下。</p><h3 id="文章在首页的封面图"><a href="#文章在首页的封面图" class="headerlink" title="文章在首页的封面图"></a>文章在首页的封面图</h3><p>对于单篇文章，在文章开头 <code>Front-matter</code> 中配置 <code>index_img</code> 属性。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs md">---<br>title: hexo使用Fluid主题<br>date: 2023-07-04 10:04:40<br>categories: blog<br>tags: [Hexo, Fluid]<br><span class="hljs-section">index<span class="hljs-emphasis">_img: /img/bg/class.jpg</span></span><br><span class="hljs-emphasis"><span class="hljs-section">---</span></span><br><span class="hljs-emphasis"><span class="hljs-section"></span></span><br><span class="hljs-emphasis"><span class="hljs-section">以下是文章内容</span></span><br></code></pre></td></tr></table></figure><p>如果想统一给文章设置一个默认图片（文章不设置 <code>index_img</code> 则默认使用这张图片），可在 <code>_config_fluid.yml</code> 中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">default_index_img:</span> <span class="hljs-string">/img/example.jpg</span><br></code></pre></td></tr></table></figure><p>当 default_index_img 和 index_img 都为空时，该文章在首页将不显示图片。</p><h3 id="关闭版权声明"><a href="#关闭版权声明" class="headerlink" title="关闭版权声明"></a>关闭版权声明</h3><p>轻度强迫症，感觉文章下面的版权声明看着十分难受，就关掉了</p><p><img src="/img/article/2-1.png"></p><div class="note note-info">            <p>在 <code>_config.fluid.yml</code> 文件中，<code>copyright</code> 的 <code>enable</code> 改为 <code>false</code></p>          </div><h3 id="关闭终端运行-hexo-命令时的效果"><a href="#关闭终端运行-hexo-命令时的效果" class="headerlink" title="关闭终端运行 hexo 命令时的效果"></a>关闭终端运行 hexo 命令时的效果</h3><p>关闭如下效果</p><p><img src="/img/article/2-2.png"></p><div class="note note-info">            <p>将博客目录文件夹的<br><code>node_modules/hexo-theme-fluid/scripts/events/lib/hello.js</code><br><code>themes/fluid/scripts/events/lib/hello.js</code><br>文件中的对应效果删除即可。</p>          </div><h3 id="Tag-便签"><a href="#Tag-便签" class="headerlink" title="Tag 便签"></a>Tag 便签</h3><p>在 <code>markdown</code> 中加入如下的代码来使用便签：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs md">&#123;% note success %&#125;<br>文字 或者 <span class="hljs-code">`markdown`</span> 均可<br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure><p>或者使用 <code>HTML</code> 形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span>&gt;</span>标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>可选便签：</strong></p><div class="note note-primary">            <p>primary</p>          </div><div class="note note-secondary">            <p>secondary</p>          </div><div class="note note-success">            <p>success</p>          </div><div class="note note-danger">            <p>danger</p>          </div><div class="note note-warning">            <p>warning</p>          </div><div class="note note-info">            <p>info</p>          </div><div class="note note-light">            <p>light</p>          </div><h3 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h3><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs md">&#123;% label primary @text %&#125;<br></code></pre></td></tr></table></figure><p>或者使用 HTML 形式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-primary&quot;</span>&gt;</span>Label<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>可选 Label</strong></p><span class="label label-primary">primary</span><span class="label label-default">default</span><span class="label label-info">info</span><span class="label label-success">success</span><span class="label label-warning">warning</span><span class="label label-danger">danger</span><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p><strong>关闭代码块行号</strong></p><p><code>_config.fluid.yaml</code> 文件中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">line_number:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h3 id="文章跳转方式"><a href="#文章跳转方式" class="headerlink" title="文章跳转方式"></a>文章跳转方式</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span><br>  <span class="hljs-attr">post_url_target:</span> <span class="hljs-string">_self</span><br></code></pre></td></tr></table></figure><p>可选值：</p><p>1._blank：新标签页打开<br>2._self：当前标签页打开</p>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/07/04/hello-world/"/>
    <url>/2023/07/04/hello-world/</url>
    
    <content type="html"><![CDATA[<h2 id="博客的搭建"><a href="#博客的搭建" class="headerlink" title="博客的搭建"></a>博客的搭建</h2><p>搭建博客网站使用的是 hexo</p><h3 id="创建一个新文章"><a href="#创建一个新文章" class="headerlink" title="创建一个新文章"></a>创建一个新文章</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ hexo new <span class="hljs-string">&quot;My New Postname&quot;</span> 或 $ hexo n <span class="hljs-string">&quot;My New Postname&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ hexo server 或 $ hexo s<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ hexo generate 或 $ hexo g<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ hexo deploy 或 $ hexo d<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h3 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ hexo clean 或 $ hexo c<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
